# Auto generated by `python task.py fea`

@Zero = [zero zero.zero];
@One = [one one.cv04];
@Digit = [@Zero @One two three four five six seven eight nine];
@Comma = [comma comma.cv61];
@Question = [question question.cv62];
@Uppercase = [A Aacute Abreve Abreveacute Abrevedotbelow Abrevegrave Abrevehookabove Abrevetilde Acaron Acircumflex Acircumflexacute Acircumflexdotbelow Acircumflexgrave Acircumflexhookabove Acircumflextilde Adieresis Adotbelow Agrave Ahookabove Amacron Aogonek Aring Atilde AE AEacute B C Cacute Ccaron Ccedilla Ccircumflex Cdotaccent D Eth Dcaron Dcroat E Eacute Ebreve Ecaron Ecircumflex Ecircumflexacute Ecircumflexdotbelow Ecircumflexgrave Ecircumflexhookabove Ecircumflextilde Edieresis Edotaccent Edotbelow Egrave Ehookabove Emacron Eogonek Eopen Etilde Schwa F G Gacute Gbreve Gcaron Gcircumflex Gcommaaccent Gdotaccent H Hbar Hcircumflex I IJ IJ_acute Iacute Ibreve Icircumflex Idieresis Idotaccent Idotbelow Igrave Ihookabove Imacron Iogonek Itilde J Jcircumflex K Kcommaaccent L Lacute Lcaron Lcommaaccent Ldot Lslash M N Nacute Ncaron Ncommaaccent Ntilde Eng O Oacute Obreve Ocircumflex Ocircumflexacute Ocircumflexdotbelow Ocircumflexgrave Ocircumflexhookabove Ocircumflextilde Odieresis Odotbelow Ograve Ohookabove Ohorn Ohornacute Ohorndotbelow Ohorngrave Ohornhookabove Ohorntilde Ohungarumlaut Omacron Oogonek Oslash Oslashacute Otilde OE P Thorn Q R Racute Rcaron Rcommaaccent S Sacute Scaron Scedilla Scircumflex Scommaaccent Germandbls T Tbar Tcaron Tcedilla Tcommaaccent U Uacute Ubreve Ucircumflex Udieresis Udotbelow Ugrave Uhookabove Uhorn Uhornacute Uhorndotbelow Uhorngrave Uhornhookabove Uhorntilde Uhungarumlaut Umacron Uogonek Uring Utilde V W Wacute Wcircumflex Wdieresis Wgrave X Y Yacute Ycircumflex Ydieresis Ydotbelow Ygrave Yhookabove Ymacron Ytilde Z Zacute Zcaron Zdotaccent A-cy Be-cy Ve-cy Ge-cy Gje-cy Gheupturn-cy Ghestroke-cy De-cy Ie-cy Io-cy Zhe-cy Ze-cy Ii-cy Iishort-cy Ka-cy Kje-cy El-cy Em-cy En-cy O-cy Pe-cy Er-cy Es-cy Te-cy U-cy Ushort-cy Ef-cy Ha-cy Che-cy Tse-cy Sha-cy Shcha-cy Dzhe-cy Softsign-cy Yeru-cy Hardsign-cy Lje-cy Nje-cy Dze-cy E-cy Ereversed-cy I-cy Yi-cy Je-cy Tshe-cy Iu-cy Ia-cy Dje-cy Kadescender-cy Endescender-cy Ustraight-cy Ustraightstroke-cy Chedescender-cy Shha-cy Schwa-cy Zhedieresis-cy Zedieresis-cy Idieresis-cy Odieresis-cy Obarred-cy Chedieresis-cy Alpha Beta Gamma Delta Epsilon Zeta Eta Theta Iota Kappa Lambda Mu Nu Xi Omicron Pi Rho Sigma Tau Upsilon Phi Chi Psi Omega Alphatonos Epsilontonos Etatonos Iotatonos Omicrontonos Upsilontonos Omegatonos Iotadieresis Upsilondieresis KaiSymbol];
@Space = [space nbspace];
@A = [A a a.cv02];
@B = [B b];
@C = [C c];
@D = [D d];
@E = [E e];
@F = [F f];
@G = [G g g.cv05];
@H = [H h];
@I = [I i i.cv03 i.cv06];
@J = [J j J.cv07];
@K = [K k];
@L = [L l l.cv04];
@M = [M m];
@N = [N n];
@O = [O o];
@P = [P p];
@Q = [Q q Q.cv01];
@R = [R r];
@S = [S s];
@T = [T t];
@U = [U u];
@V = [V v];
@W = [W w];
@X = [X x];
@Y = [Y y];
@Z = [Z z];
@Var = [underscore underscore_underscore.liga @A @B @C @D @E @F @G @H @I @J @K @L @M @N @O @P @Q @R @S @T @U @V @W @X @Y @Z @Digit];
@HexLetter = [@A @B @C @D @E @F];

languagesystem DFLT dflt;

languagesystem latn dflt;
languagesystem latn AZE;
languagesystem latn CRT;
languagesystem latn KAZ;
languagesystem latn TAT;
languagesystem latn TRK;
languagesystem latn ROM;
languagesystem latn MOL;
languagesystem latn CAT;

feature aalt {

  feature locl;
  feature case;
  feature sinf;
  feature subs;
  feature sups;
  feature numr;
  feature dnom;
  feature frac;
  feature ordn;
  feature zero;
  feature calt;

} aalt;

feature ccmp {

  @CombiningTopAccents = [acutecomb brevecomb caroncomb circumflexcomb commaturnedabovecomb dblgravecomb dieresiscomb dotaccentcomb gravecomb hookabovecomb hungarumlautcomb macroncomb ringcomb tildecomb];
  @CombiningNonTopAccents = [cedillacomb dotbelowcomb ogonekcomb ringbelowcomb horncomb slashlongcomb slashshortcomb strokelongcomb];
  @Markscomb = [dieresiscomb dotaccentcomb gravecomb acutecomb hungarumlautcomb circumflexcomb caroncomb brevecomb ringcomb tildecomb macroncomb hookabovecomb dblgravecomb commaturnedabovecomb horncomb dotbelowcomb commaaccentcomb cedillacomb ogonekcomb dieresis dotaccent acute hungarumlaut circumflex caron breve ring tilde macron tonos brevecomb_acutecomb brevecomb_gravecomb brevecomb_hookabovecomb brevecomb_tildecomb circumflexcomb_acutecomb circumflexcomb_gravecomb circumflexcomb_hookabovecomb circumflexcomb_tildecomb];
  @MarkscombCase = [dieresiscomb.case dotaccentcomb.case gravecomb.case acutecomb.case hungarumlautcomb.case circumflexcomb.case caroncomb.case brevecomb.case ringcomb.case tildecomb.case macroncomb.case hookabovecomb.case dblgravecomb.case commaturnedabovecomb.case horncomb.case dotbelowcomb.case commaaccentcomb.case cedillacomb.case ogonekcomb.case dieresis.case dotaccent.case acute.case hungarumlaut.case circumflex.case caron.case breve.case ring.case tilde.case macron.case tonos.case brevecomb_acutecomb.case brevecomb_gravecomb.case brevecomb_hookabovecomb.case brevecomb_tildecomb.case circumflexcomb_acutecomb.case circumflexcomb_gravecomb.case circumflexcomb_hookabovecomb.case circumflexcomb_tildecomb.case];

  lookup ccmp_other {
    sub [i i-cy iogonek idotbelow j je-cy]' @CombiningTopAccents by [idotless idotless iogonekdotless idotbelowdotless jdotless jdotless];
    sub [i i-cy iogonek idotbelow j je-cy]' @CombiningNonTopAccents @CombiningTopAccents by [idotless idotless iogonekdotless idotbelowdotless jdotless jdotless];
    sub @Markscomb @Markscomb' by @MarkscombCase;
    sub @Uppercase @Markscomb' by @MarkscombCase;
    sub @Markscomb' @MarkscombCase by @MarkscombCase;
    sub @MarkscombCase @Markscomb' by @MarkscombCase;
  } ccmp_other;

  lookup ccmp_latn {
    lookupflag 0;
    sub brevecomb acutecomb by brevecomb_acutecomb;
    sub brevecomb.case acutecomb.case by brevecomb_acutecomb.case;
    sub brevecomb gravecomb by brevecomb_gravecomb;
    sub brevecomb.case gravecomb.case by brevecomb_gravecomb.case;
    sub brevecomb hookabovecomb by brevecomb_hookabovecomb;
    sub brevecomb.case hookabovecomb.case by brevecomb_hookabovecomb.case;
    sub brevecomb tildecomb by brevecomb_tildecomb;
    sub brevecomb.case tildecomb.case by brevecomb_tildecomb.case;
    sub circumflexcomb acutecomb by circumflexcomb_acutecomb;
    sub circumflexcomb.case acutecomb.case by circumflexcomb_acutecomb.case;
    sub circumflexcomb gravecomb by circumflexcomb_gravecomb;
    sub circumflexcomb.case gravecomb.case by circumflexcomb_gravecomb.case;
    sub circumflexcomb hookabovecomb by circumflexcomb_hookabovecomb;
    sub circumflexcomb.case hookabovecomb.case by circumflexcomb_hookabovecomb.case;
    sub circumflexcomb tildecomb by circumflexcomb_tildecomb;
    sub circumflexcomb.case tildecomb.case by circumflexcomb_tildecomb.case;
  } ccmp_latn;
  script latn;
  lookup ccmp_other;

} ccmp;

feature locl {

  lookup locl_latn_0 {
    script latn;
    language AZE;
    sub i by idotaccent;
    language CRT;
    sub i by idotaccent;
    language KAZ;
    sub i by idotaccent;
    language TAT;
    sub i by idotaccent;
    language TRK;
    sub i by idotaccent;
  } locl_latn_0;

  lookup locl_latn_1 {
    script latn;
    language ROM;
    sub Scedilla by Scommaaccent;
    sub scedilla by scommaaccent;
    sub Tcedilla by Tcommaaccent;
    sub tcedilla by tcommaaccent;
    language MOL;
    sub Scedilla by Scommaaccent;
    sub scedilla by scommaaccent;
    sub Tcedilla by Tcommaaccent;
    sub tcedilla by tcommaaccent;
  } locl_latn_1;

  lookup locl_latn_2 {
    script latn;
    language CAT;
    sub l periodcentered' l by periodcentered.loclCAT;
    sub L periodcentered' L by periodcentered.loclCAT.case;
  } locl_latn_2;

  lookup locl_latn_3 {
    script latn;
    language NLD;
    sub ij acutecomb by ij_acute;
    sub IJ acutecomb by IJ_acute;
  } locl_latn_3;

} locl;

feature case {

  sub colon by colon.case;
  sub periodcentered.loclCAT by periodcentered.loclCAT.case;
  sub dieresiscomb by dieresiscomb.case;
  sub dotaccentcomb by dotaccentcomb.case;
  sub gravecomb by gravecomb.case;
  sub acutecomb by acutecomb.case;
  sub hungarumlautcomb by hungarumlautcomb.case;
  sub circumflexcomb by circumflexcomb.case;
  sub caroncomb by caroncomb.case;
  sub brevecomb by brevecomb.case;
  sub ringcomb by ringcomb.case;
  sub tildecomb by tildecomb.case;
  sub macroncomb by macroncomb.case;
  sub hookabovecomb by hookabovecomb.case;
  sub dblgravecomb by dblgravecomb.case;
  sub commaturnedabovecomb by commaturnedabovecomb.case;
  sub horncomb by horncomb.case;
  sub dotbelowcomb by dotbelowcomb.case;
  sub commaaccentcomb by commaaccentcomb.case;
  sub cedillacomb by cedillacomb.case;
  sub ogonekcomb by ogonekcomb.case;
  sub dieresis by dieresis.case;
  sub dotaccent by dotaccent.case;
  sub grave by grave.case;
  sub acute by acute.case;
  sub hungarumlaut by hungarumlaut.case;
  sub circumflex by circumflex.case;
  sub caron by caron.case;
  sub breve by breve.case;
  sub ring by ring.case;
  sub tilde by tilde.case;
  sub macron by macron.case;
  sub tonos by tonos.case;
  sub brevecomb_acutecomb by brevecomb_acutecomb.case;
  sub brevecomb_gravecomb by brevecomb_gravecomb.case;
  sub brevecomb_hookabovecomb by brevecomb_hookabovecomb.case;
  sub brevecomb_tildecomb by brevecomb_tildecomb.case;
  sub circumflexcomb_acutecomb by circumflexcomb_acutecomb.case;
  sub circumflexcomb_gravecomb by circumflexcomb_gravecomb.case;
  sub circumflexcomb_hookabovecomb by circumflexcomb_hookabovecomb.case;
  sub circumflexcomb_tildecomb by circumflexcomb_tildecomb.case;

} case;

feature sinf {

  sub zero by zeroinferior;
  sub one by oneinferior;
  sub two by twoinferior;
  sub three by threeinferior;
  sub four by fourinferior;
  sub five by fiveinferior;
  sub six by sixinferior;
  sub seven by seveninferior;
  sub eight by eightinferior;
  sub nine by nineinferior;

} sinf;

feature subs {

  sub zero by zeroinferior;
  sub one by oneinferior;
  sub two by twoinferior;
  sub three by threeinferior;
  sub four by fourinferior;
  sub five by fiveinferior;
  sub six by sixinferior;
  sub seven by seveninferior;
  sub eight by eightinferior;
  sub nine by nineinferior;

} subs;

feature sups {

  sub zero by zerosuperior;
  sub one by onesuperior;
  sub two by twosuperior;
  sub three by threesuperior;
  sub four by foursuperior;
  sub five by fivesuperior;
  sub six by sixsuperior;
  sub seven by sevensuperior;
  sub eight by eightsuperior;
  sub nine by ninesuperior;

} sups;

feature numr {

  sub zero by zero.numr;
  sub one by one.numr;
  sub two by two.numr;
  sub three by three.numr;
  sub four by four.numr;
  sub five by five.numr;
  sub six by six.numr;
  sub seven by seven.numr;
  sub eight by eight.numr;
  sub nine by nine.numr;

} numr;

feature dnom {

  sub zero by zero.dnom;
  sub one by one.dnom;
  sub two by two.dnom;
  sub three by three.dnom;
  sub four by four.dnom;
  sub five by five.dnom;
  sub six by six.dnom;
  sub seven by seven.dnom;
  sub eight by eight.dnom;
  sub nine by nine.dnom;

} dnom;

feature frac {

  lookup FRAC {
    sub slash by fraction;
  } FRAC;

  lookup UP {
    sub [zero one two three four five six seven eight nine] by [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
  } UP;

  lookup DOWN {
    sub fraction [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr]' by [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];
    sub [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom] [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr]' by [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];
  } DOWN;

} frac;

feature ordn {

  sub [zero one two three four five six seven eight nine] [A a]' by ordfeminine;
  sub [zero one two three four five six seven eight nine] [O o]' by ordmasculine;
  sub N o period by numero;

} ordn;

feature zero {

  sub zero by zero.zero;
  sub zero.dnom by zero.dnom.zero;
  sub zero.numr by zero.numr.zero;
  sub zeroinferior by zeroinferior.zero;
  sub zerosuperior by zerosuperior.zero;

} zero;

feature calt {

  lookup uppercase_colon {
    sub [@Digit @Uppercase] colon' [@Digit @Uppercase] by colon.case;
  } uppercase_colon;

  lookup uppercase_sharp_s {
    sub @Uppercase @Uppercase germandbls' by germandbls.calt;
    sub germandbls' @Uppercase by germandbls.calt;
  } uppercase_sharp_s;

  # ::
  lookup colon_colon.liga {
    ignore sub colon colon' colon;
    ignore sub colon' colon colon;
    sub SPC colon' by colon_colon.liga;
    sub colon' colon by SPC;
  } colon_colon.liga;

  # :::
  lookup colon_colon_colon.liga {
    ignore sub colon colon' colon colon;
    ignore sub colon' colon colon colon;
    sub SPC SPC colon' by colon_colon_colon.liga;
    sub SPC colon' colon by SPC;
    sub colon' colon colon by SPC;
  } colon_colon_colon.liga;

  # ?:
  lookup question_colon.liga {
    ignore sub @Question @Question' colon;
    ignore sub @Question' colon [colon equal];
    sub SPC colon' by question_colon.liga;
    sub @Question' colon by SPC;
  } question_colon.liga;

  # :?
  lookup colon_question.liga {
    ignore sub colon colon' @Question;
    ignore sub colon' @Question [@Question greater];
    sub SPC @Question' by colon_question.liga;
    sub colon' @Question by SPC;
  } colon_question.liga;

  # :?>
  lookup colon_question_greater.liga {
    ignore sub colon colon' @Question greater;
    ignore sub colon' @Question greater greater;
    sub SPC SPC greater' by colon_question_greater.liga;
    sub SPC @Question' greater by SPC;
    sub colon' @Question greater by SPC;
  } colon_question_greater.liga;

  @IgnoreColon = [less colon greater equal];
  @IgnoreMarkup = [less slash greater];

  # <:
  lookup less_colon.liga {
    ignore sub less less' colon;
    ignore sub less' colon @IgnoreColon;
    sub SPC colon' by less_colon.liga;
    sub less' colon by SPC;
  } less_colon.liga;

  # :>
  lookup colon_greater.liga {
    ignore sub @IgnoreColon colon' greater;
    ignore sub colon' greater greater;
    sub SPC greater' by colon_greater.liga;
    sub colon' greater by SPC;
  } colon_greater.liga;

  # :<
  lookup colon_less.liga {
    ignore sub @IgnoreColon colon' less;
    ignore sub colon' less @IgnoreMarkup;
    sub SPC less' by colon_less.liga;
    sub colon' less by SPC;
  } colon_less.liga;

  # <:<
  lookup less_colon_less.liga {
    ignore sub less less' colon less;
    ignore sub less' colon less @IgnoreMarkup;
    sub SPC SPC less' by less_colon_less.liga;
    sub SPC colon' less by SPC;
    sub less' colon less by SPC;
  } less_colon_less.liga;

  # >:>
  lookup greater_colon_greater.liga {
    ignore sub @IgnoreMarkup greater' colon greater;
    ignore sub greater' colon greater greater;
    sub SPC SPC greater' by greater_colon_greater.liga;
    sub SPC colon' greater by SPC;
    sub greater' colon greater by SPC;
  } greater_colon_greater.liga;

  # __
  lookup underscore_underscore.liga {
    ignore sub [underscore numbersign] underscore' underscore;
    ignore sub underscore' underscore underscore;
    sub SPC underscore' by underscore_underscore.liga;
    sub underscore' underscore by SPC;
  } underscore_underscore.liga;

  # #{
  lookup numbersign_braceleft.liga {
    ignore sub numbersign numbersign' braceleft;
    ignore sub numbersign' braceleft braceleft;
    sub SPC braceleft' by numbersign_braceleft.liga;
    sub numbersign' braceleft by SPC;
  } numbersign_braceleft.liga;

  # #[
  lookup numbersign_bracketleft.liga {
    ignore sub numbersign numbersign' bracketleft;
    ignore sub numbersign' bracketleft bracketleft;
    sub SPC bracketleft' by numbersign_bracketleft.liga;
    sub numbersign' bracketleft by SPC;
  } numbersign_bracketleft.liga;

  # #(
  lookup numbersign_parenleft.liga {
    ignore sub numbersign numbersign' parenleft;
    ignore sub numbersign' parenleft parenleft;
    sub SPC parenleft' by numbersign_parenleft.liga;
    sub numbersign' parenleft by SPC;
  } numbersign_parenleft.liga;

  # #?
  lookup numbersign_question.liga {
    ignore sub numbersign numbersign' @Question;
    ignore sub numbersign' @Question @Question;
    sub SPC @Question' by numbersign_question.liga;
    sub numbersign' @Question by SPC;
  } numbersign_question.liga;

  # #!
  lookup numbersign_exclam.liga {
    ignore sub numbersign numbersign' exclam;
    ignore sub numbersign' exclam [exclam equal];
    sub SPC exclam' by numbersign_exclam.liga;
    sub numbersign' exclam by SPC;
  } numbersign_exclam.liga;

  # #:
  lookup numbersign_colon.liga {
    ignore sub numbersign numbersign' colon;
    ignore sub numbersign' colon [colon equal];
    sub SPC colon' by numbersign_colon.liga;
    sub numbersign' colon by SPC;
  } numbersign_colon.liga;

  # #=
  lookup numbersign_equal.liga {
    ignore sub numbersign numbersign' equal;
    ignore sub numbersign' equal equal;
    sub SPC equal' by numbersign_equal.liga;
    sub numbersign' equal by SPC;
  } numbersign_equal.liga;

  # #_
  lookup numbersign_underscore.liga {
    ignore sub numbersign' underscore [underscore parenleft];
    sub SPC underscore' by numbersign_underscore.liga;
    sub numbersign' underscore by SPC;
  } numbersign_underscore.liga;

  # #__
  lookup numbersign_underscore_underscore.liga {
    ignore sub numbersign' underscore underscore underscore;
    sub SPC SPC underscore' by numbersign_underscore_underscore.liga;
    sub SPC underscore' underscore by SPC;
    sub numbersign' underscore underscore by SPC;
  } numbersign_underscore_underscore.liga;

  # #_(
  lookup numbersign_underscore_parenleft.liga {
    ignore sub numbersign' underscore parenleft parenleft;
    sub SPC SPC parenleft' by numbersign_underscore_parenleft.liga;
    sub SPC underscore' parenleft by SPC;
    sub numbersign' underscore parenleft by SPC;
  } numbersign_underscore_parenleft.liga;

  # ]#
  lookup bracketright_numbersign.liga {
    ignore sub bracketright bracketright' numbersign;
    ignore sub bracketright' numbersign numbersign;
    sub SPC numbersign' by bracketright_numbersign.liga;
    sub bracketright' numbersign by SPC;
  } bracketright_numbersign.liga;

  # #######
  lookup infinite_numbersigns {
    sub [numbersign.sta.seq numbersign.mid.seq] numbersign' numbersign by numbersign.mid.seq;
    sub [numbersign.sta.seq numbersign.mid.seq] numbersign' by numbersign.end.seq;
    sub numbersign' numbersign by numbersign.sta.seq;
  } infinite_numbersigns;

  # <<
  lookup less_less.liga {
    ignore sub less less' less;
    ignore sub less' less [less asciitilde];
    sub SPC less' by less_less.liga;
    sub less' less by SPC;
  } less_less.liga;

  # <<<
  lookup less_less_less.liga {
    ignore sub less less' less less;
    ignore sub less' less less less;
    sub SPC SPC less' by less_less_less.liga;
    sub SPC less' less by SPC;
    sub less' less less by SPC;
  } less_less_less.liga;

  @LeadingSymbolLiga = [plus_plus.liga hyphen_hyphen.liga underscore_underscore.liga];
  @EqualHyphen = [equal hyphen];
  @SymbolBeforeGreater = [bar exclam asciitilde asciitilde numbersign percent @Space @EqualHyphen];
  @Number = [plus hyphen @Digit];
  @QuoteLike = [grave quotesingle quotedbl];

  # >>
  lookup greater_greater.liga {
    ignore sub [less slash greater] greater' greater;
    ignore sub greater' greater greater;
    sub greater' greater dollar by SPC;
    sub SPC greater' by greater_greater.liga;
    sub @QuoteLike SPC greater' @QuoteLike by greater_greater.liga;
    sub @QuoteLike greater' greater @QuoteLike by SPC;
    sub SPC greater' [slash @Number @EqualHyphen] by greater_greater.liga;
    sub greater' greater [slash @Number @EqualHyphen] by SPC;
    sub SPC greater' @Space @Number by greater_greater.liga;
    sub greater' greater @Space @Number by SPC;
    sub @SymbolBeforeGreater SPC greater' by greater_greater.liga;
    sub @SymbolBeforeGreater greater' greater by SPC;
    sub @Var SPC greater' [@Var @Number] by greater_greater.liga;
    sub @Var greater' greater [@Var @Number] by SPC;
    sub @Var SPC greater' SPC @LeadingSymbolLiga by greater_greater.liga;
    sub @Var greater' greater SPC @LeadingSymbolLiga by SPC;
    sub @Var SPC greater' @Space SPC @LeadingSymbolLiga by greater_greater.liga;
    sub @Var greater' greater @Space SPC @LeadingSymbolLiga by SPC;
  } greater_greater.liga;

  # >>>
  lookup greater_greater_greater.liga {
    ignore sub greater greater' greater greater;
    ignore sub greater' greater greater greater;
    sub @QuoteLike SPC SPC greater' @QuoteLike by greater_greater_greater.liga;
    sub @QuoteLike SPC greater' greater @QuoteLike by SPC;
    sub @QuoteLike greater' greater greater @QuoteLike by SPC;
    sub SPC SPC greater' [slash @Number @EqualHyphen] by greater_greater_greater.liga;
    sub SPC greater' greater [slash @Number @EqualHyphen] by SPC;
    sub greater' greater greater [slash @Number @EqualHyphen] by SPC;
    sub SPC SPC greater' @Space @Number by greater_greater_greater.liga;
    sub SPC greater' greater @Space @Number by SPC;
    sub greater' greater greater @Space @Number by SPC;
    sub @SymbolBeforeGreater SPC SPC greater' by greater_greater_greater.liga;
    sub @SymbolBeforeGreater SPC greater' greater by SPC;
    sub @SymbolBeforeGreater greater' greater greater by SPC;
    sub @Var SPC SPC greater' [@Var @Number] by greater_greater_greater.liga;
    sub @Var SPC greater' greater [@Var @Number] by SPC;
    sub @Var greater' greater greater [@Var @Number] by SPC;
    sub @Var SPC SPC greater' SPC @LeadingSymbolLiga by greater_greater_greater.liga;
    sub @Var SPC greater' greater SPC @LeadingSymbolLiga by SPC;
    sub @Var greater' greater greater SPC @LeadingSymbolLiga by SPC;
    sub @Var SPC SPC greater' @Space SPC @LeadingSymbolLiga by greater_greater_greater.liga;
    sub @Var SPC greater' greater @Space SPC @LeadingSymbolLiga by SPC;
    sub @Var greater' greater greater @Space SPC @LeadingSymbolLiga by SPC;
  } greater_greater_greater.liga;

  # {{
  lookup braceleft_braceleft.liga {
    ignore sub braceleft braceleft' braceleft;
    ignore sub braceleft' braceleft [braceleft exclam];
    ignore sub braceleft' braceleft hyphen hyphen;
    sub braceleft' braceleft by braceleft.sta.seq;
    sub braceleft.sta.seq braceleft' by braceleft.end.seq;
  } braceleft_braceleft.liga;

  # }}
  lookup braceright_braceright.liga {
    ignore sub [exclam braceright hyphen] braceright' braceright;
    ignore sub braceright' braceright braceright;
    sub braceright' braceright by braceright.sta.seq;
    sub braceright.sta.seq braceright' by braceright.end.seq;
  } braceright_braceright.liga;

  # {|
  lookup braceleft_bar.liga {
    ignore sub braceleft braceleft' bar;
    ignore sub braceleft' bar [bar braceright];
    sub SPC bar' by braceleft_bar.liga;
    sub braceleft' bar by SPC;
  } braceleft_bar.liga;

  # |}
  lookup bar_braceright.liga {
    ignore sub [braceleft bar] bar' braceright;
    ignore sub bar' braceright braceright;
    sub SPC braceright' by bar_braceright.liga;
    sub bar' braceright by SPC;
  } bar_braceright.liga;

  # {{--
  lookup braceleft_braceleft_hyphen_hyphen.liga {
    ignore sub braceleft braceleft' braceleft hyphen hyphen;
    ignore sub braceleft' braceleft hyphen hyphen hyphen;
    sub SPC SPC SPC hyphen' by braceleft_braceleft_hyphen_hyphen.liga;
    sub SPC SPC hyphen' hyphen by SPC;
    sub SPC braceleft' hyphen hyphen by SPC;
    sub braceleft' braceleft hyphen hyphen by SPC;
  } braceleft_braceleft_hyphen_hyphen.liga;

  # {{!--
  lookup braceleft_braceleft_exclam_hyphen_hyphen.liga {
    ignore sub braceleft braceleft' braceleft exclam hyphen hyphen;
    ignore sub braceleft' braceleft exclam hyphen hyphen hyphen;
    sub SPC SPC SPC SPC hyphen' by braceleft_braceleft_exclam_hyphen_hyphen.liga;
    sub SPC SPC SPC hyphen' hyphen by SPC;
    sub SPC SPC exclam' hyphen hyphen by SPC;
    sub SPC braceleft' exclam hyphen hyphen by SPC;
    sub braceleft' braceleft exclam hyphen hyphen by SPC;
  } braceleft_braceleft_exclam_hyphen_hyphen.liga;

  # --}}
  lookup hyphen_hyphen_braceright_braceright.liga {
    ignore sub hyphen hyphen' hyphen braceright braceright;
    ignore sub hyphen' hyphen braceright braceright braceright;
    sub SPC SPC SPC braceright' by hyphen_hyphen_braceright_braceright.liga;
    sub SPC SPC braceright' braceright by SPC;
    sub SPC hyphen' braceright braceright by SPC;
    sub hyphen' hyphen braceright braceright by SPC;
  } hyphen_hyphen_braceright_braceright.liga;

  # [|
  lookup bracketleft_bar.liga {
    ignore sub bracketleft bracketleft' bar;
    ignore sub bracketleft' bar [bracketright bar];
    sub SPC bar' by bracketleft_bar.liga;
    sub bracketleft' bar by SPC;
  } bracketleft_bar.liga;

  # |]
  lookup bar_bracketright.liga {
    ignore sub [bracketleft bar] bar' bracketright;
    ignore sub bar' bracketright bracketright;
    sub SPC bracketright' by bar_bracketright.liga;
    sub bar' bracketright by SPC;
  } bar_bracketright.liga;

  # !!
  lookup exclam_exclam.liga {
    ignore sub exclam exclam' exclam;
    ignore sub exclam' exclam exclam;
    ignore sub parenleft @Question exclam' exclam;
    ignore sub parenleft @Question less exclam' exclam;
    sub SPC exclam' by exclam_exclam.liga;
    sub exclam' exclam by SPC;
  } exclam_exclam.liga;

  # ||
  lookup bar_bar.liga {
    ignore sub [bar bracketleft less] bar' bar;
    ignore sub bar' bar [bar bracketright greater];
    sub SPC bar' by bar_bar.liga;
    sub bar' bar by SPC;
  } bar_bar.liga;

  # ??
  lookup question_question.liga {
    ignore sub @Question @Question' @Question;
    ignore sub @Question' @Question @Question;
    sub SPC @Question' by question_question.liga;
    sub @Question' @Question by SPC;
  } question_question.liga;

  # ???
  lookup question_question_question.liga {
    ignore sub @Question @Question' @Question @Question;
    ignore sub @Question' @Question @Question @Question;
    sub SPC SPC @Question' by question_question_question.liga;
    sub SPC @Question' @Question by SPC;
    sub @Question' @Question @Question by SPC;
  } question_question_question.liga;

  # &&
  lookup ampersand_ampersand.liga {
    ignore sub ampersand ampersand' ampersand;
    ignore sub ampersand' ampersand ampersand;
    sub SPC ampersand' by ampersand_ampersand.liga;
    sub ampersand' ampersand by SPC;
  } ampersand_ampersand.liga;

  # &&&
  lookup ampersand_ampersand_ampersand.liga {
    ignore sub ampersand ampersand' ampersand ampersand;
    ignore sub ampersand' ampersand ampersand ampersand;
    sub SPC SPC ampersand' by ampersand_ampersand_ampersand.liga;
    sub SPC ampersand' ampersand by SPC;
    sub ampersand' ampersand ampersand by SPC;
  } ampersand_ampersand_ampersand.liga;

  # //
  lookup slash_slash.liga {
    ignore sub slash slash' slash;
    ignore sub slash' slash slash;
    sub SPC slash' by slash_slash.liga;
    sub slash' slash by SPC;
  } slash_slash.liga;

  # ///
  lookup slash_slash_slash.liga {
    ignore sub slash slash' slash slash;
    ignore sub slash' slash slash slash;
    sub SPC SPC slash' by slash_slash_slash.liga;
    sub SPC slash' slash by SPC;
    sub slash' slash slash by SPC;
  } slash_slash_slash.liga;

  # /*
  lookup slash_asterisk.liga {
    ignore sub [slash asterisk] slash' asterisk;
    ignore sub slash' asterisk [slash asterisk period];
    sub SPC asterisk' by slash_asterisk.liga;
    sub slash' asterisk by SPC;
  } slash_asterisk.liga;

  # /**
  lookup slash_asterisk_asterisk.liga {
    ignore sub [slash asterisk] slash' asterisk asterisk;
    ignore sub slash' asterisk asterisk [slash asterisk period];
    sub SPC SPC asterisk' by slash_asterisk_asterisk.liga;
    sub SPC asterisk' asterisk by SPC;
    sub slash' asterisk asterisk by SPC;
  } slash_asterisk_asterisk.liga;

  # */
  lookup asterisk_slash.liga {
    ignore sub [slash asterisk period] asterisk' slash;
    ignore sub asterisk' slash [slash asterisk];
    sub SPC slash' by asterisk_slash.liga;
    sub asterisk' slash by SPC;
  } asterisk_slash.liga;

  # ++
  lookup plus_plus.liga {
    ignore sub [plus colon] plus' plus;
    ignore sub plus' plus [plus colon];
    sub SPC plus' by plus_plus.liga;
    sub plus' plus by SPC;
  } plus_plus.liga;

  # +++
  lookup plus_plus_plus.liga {
    ignore sub plus plus' plus plus;
    ignore sub plus' plus plus plus;
    sub SPC SPC plus' by plus_plus_plus.liga;
    sub SPC plus' plus by SPC;
    sub plus' plus plus by SPC;
  } plus_plus_plus.liga;

  # ;;
  lookup semicolon_semicolon.liga {
    ignore sub semicolon semicolon' semicolon;
    ignore sub semicolon' semicolon semicolon;
    sub SPC semicolon' by semicolon_semicolon.liga;
    sub semicolon' semicolon by SPC;
  } semicolon_semicolon.liga;

  # ;;;
  lookup semicolon_semicolon_semicolon.liga {
    ignore sub semicolon semicolon' semicolon semicolon;
    ignore sub semicolon' semicolon semicolon semicolon;
    sub SPC SPC semicolon' by semicolon_semicolon_semicolon.liga;
    sub SPC semicolon' semicolon by SPC;
    sub semicolon' semicolon semicolon by SPC;
  } semicolon_semicolon_semicolon.liga;

  # ..
  lookup period_period.liga {
    ignore sub period period' period;
    ignore sub period' period [period less @Question];
    sub SPC period' by period_period.liga;
    sub period' period by SPC;
  } period_period.liga;

  # ...
  lookup period_period_period.liga {
    ignore sub period period' period period;
    ignore sub period' period period [period less @Question];
    sub SPC SPC period' by period_period_period.liga;
    sub SPC period' period by SPC;
    sub period' period period by SPC;
  } period_period_period.liga;

  # .?
  lookup period_question.liga {
    ignore sub period period' @Question;
    ignore sub period' @Question @Question;
    sub SPC @Question' by period_question.liga;
    sub period' @Question by SPC;
  } period_question.liga;

  # ?.
  lookup question_period.liga {
    ignore sub @Question @Question' period;
    ignore sub @Question' period [period equal @Question];
    sub SPC period' by question_period.liga;
    sub @Question' period by SPC;
  } question_period.liga;

  # ..<
  lookup period_period_less.liga {
    ignore sub period period' period less;
    ignore sub period' period less [less slash greater];
    sub SPC SPC less' by period_period_less.liga;
    sub SPC period' less by SPC;
    sub period' period less by SPC;
  } period_period_less.liga;

  # .=
  lookup period_equal.liga {
    ignore sub period period' equal;
    ignore sub period' equal [equal greater];
    sub SPC equal' by period_equal.liga;
    sub period' equal by SPC;
  } period_equal.liga;

  # <~
  lookup less_asciitilde.liga {
    ignore sub less less' asciitilde;
    ignore sub less' asciitilde [asciitilde greater];
    sub SPC asciitilde' by less_asciitilde.liga;
    sub less' asciitilde by SPC;
  } less_asciitilde.liga;

  # ~>
  lookup asciitilde_greater.liga {
    ignore sub [asciitilde less] asciitilde' greater;
    ignore sub asciitilde' greater greater;
    sub SPC greater' by asciitilde_greater.liga;
    sub asciitilde' greater by SPC;
  } asciitilde_greater.liga;

  # ~~
  lookup asciitilde_asciitilde.liga {
    ignore sub [asciitilde less] asciitilde' asciitilde;
    ignore sub asciitilde' asciitilde [asciitilde greater];
    sub SPC asciitilde' by asciitilde_asciitilde.liga;
    sub asciitilde' asciitilde by SPC;
  } asciitilde_asciitilde.liga;

  # <~>
  lookup less_asciitilde_greater.liga {
    ignore sub less less' asciitilde greater;
    ignore sub less' asciitilde greater greater;
    sub SPC SPC greater' by less_asciitilde_greater.liga;
    sub SPC asciitilde' greater by SPC;
    sub less' asciitilde greater by SPC;
  } less_asciitilde_greater.liga;

  # <~~
  lookup less_asciitilde_asciitilde.liga {
    ignore sub less less' asciitilde asciitilde;
    ignore sub less' asciitilde asciitilde [asciitilde greater];
    sub SPC SPC asciitilde' by less_asciitilde_asciitilde.liga;
    sub SPC asciitilde' asciitilde by SPC;
    sub less' asciitilde asciitilde by SPC;
  } less_asciitilde_asciitilde.liga;

  # ~~>
  lookup asciitilde_asciitilde_greater.liga {
    ignore sub [asciitilde less] asciitilde' asciitilde greater;
    ignore sub asciitilde' asciitilde greater greater;
    sub SPC SPC greater' by asciitilde_asciitilde_greater.liga;
    sub SPC asciitilde' greater by SPC;
    sub asciitilde' asciitilde greater by SPC;
  } asciitilde_asciitilde_greater.liga;

  # -~
  lookup hyphen_asciitilde.liga {
    ignore sub hyphen hyphen' asciitilde;
    ignore sub hyphen' asciitilde asciitilde;
    sub SPC asciitilde' by hyphen_asciitilde.liga;
    sub hyphen' asciitilde by SPC;
  } hyphen_asciitilde.liga;

  # ~-
  lookup asciitilde_hyphen.liga {
    ignore sub asciitilde asciitilde' hyphen;
    ignore sub asciitilde' hyphen hyphen;
    sub SPC hyphen' by asciitilde_hyphen.liga;
    sub asciitilde' hyphen by SPC;
  } asciitilde_hyphen.liga;

  # ~@
  lookup asciitilde_at.liga {
    ignore sub asciitilde asciitilde' at;
    ignore sub asciitilde' at at;
    sub SPC at' by asciitilde_at.liga;
    sub asciitilde' at by SPC;
  } asciitilde_at.liga;

  # ~~~~~~~
  lookup infinite_asciitilde {
    sub [asciitilde.sta.seq asciitilde.mid.seq] asciitilde' asciitilde by asciitilde.mid.seq;
    sub [asciitilde.sta.seq asciitilde.mid.seq] asciitilde' by asciitilde.end.seq;
    sub asciitilde' asciitilde by asciitilde.sta.seq;
  } infinite_asciitilde;

  # 0xA12 0x56 1920x1080
  lookup cross {
    sub @Zero x' [@Digit @HexLetter] by multiply;
    sub @Digit x' @Digit by multiply;
  } cross;

  # <>
  lookup less_greater.liga {
    ignore sub less less' greater;
    ignore sub less' greater greater;
    sub SPC greater' by less_greater.liga;
    sub less' greater by SPC;
  } less_greater.liga;

  # </
  lookup less_slash.liga {
    ignore sub less less' slash;
    ignore sub less' slash [slash greater];
    sub SPC slash' by less_slash.liga;
    sub less' slash by SPC;
  } less_slash.liga;

  # />
  lookup slash_greater.liga {
    ignore sub [less slash] slash' greater;
    ignore sub slash' greater greater;
    sub SPC greater' by slash_greater.liga;
    sub slash' greater by SPC;
  } slash_greater.liga;

  # </>
  lookup less_slash_greater.liga {
    ignore sub less less' slash greater;
    ignore sub less' slash greater greater;
    sub SPC SPC greater' by less_slash_greater.liga;
    sub SPC slash' greater by SPC;
    sub less' slash greater by SPC;
  } less_slash_greater.liga;

  # <+
  lookup less_plus.liga {
    ignore sub less less' plus;
    ignore sub less' plus [plus greater];
    sub SPC plus' by less_plus.liga;
    sub less' plus by SPC;
  } less_plus.liga;

  # +>
  lookup plus_greater.liga {
    ignore sub [plus less] plus' greater;
    ignore sub plus' greater greater;
    sub SPC greater' by plus_greater.liga;
    sub plus' greater by SPC;
  } plus_greater.liga;

  # <+>
  lookup less_plus_greater.liga {
    ignore sub less less' plus greater;
    ignore sub less' plus greater greater;
    sub SPC SPC greater' by less_plus_greater.liga;
    sub SPC plus' greater by SPC;
    sub less' plus greater by SPC;
  } less_plus_greater.liga;

  # <*
  lookup less_asterisk.liga {
    ignore sub less less' asterisk;
    ignore sub less' asterisk [asterisk greater];
    sub SPC asterisk' by less_asterisk.liga;
    sub less' asterisk by SPC;
  } less_asterisk.liga;

  # *>
  lookup asterisk_greater.liga {
    ignore sub [asterisk less] asterisk' greater;
    ignore sub asterisk' greater greater;
    sub SPC greater' by asterisk_greater.liga;
    sub asterisk' greater by SPC;
  } asterisk_greater.liga;

  # <*>
  lookup less_asterisk_greater.liga {
    ignore sub less less' asterisk greater;
    ignore sub less' asterisk greater greater;
    sub SPC SPC greater' by less_asterisk_greater.liga;
    sub SPC asterisk' greater by SPC;
    sub less' asterisk greater by SPC;
  } less_asterisk_greater.liga;

  # >=
  lookup greater_equal.liga {
    ignore sub [greater equal bar] greater' equal;
    ignore sub greater' equal [less greater equal exclam SPC];
    sub SPC equal' by greater_equal.liga;
    sub greater' equal by SPC;
  } greater_equal.liga;

  # <=
  lookup less_equal.liga {
    ignore sub [less equal] less' equal;
    ignore sub less' equal [less greater equal exclam bar SPC];
    ignore sub parenleft @Question less' equal;
    sub SPC equal' by less_equal.liga;
    sub less' equal by SPC;
  } less_equal.liga;

  # <=<
  lookup less_equal_less.liga {
    ignore sub [less equal] less' equal less;
    ignore sub less' equal less [less equal @Var];
    ignore sub parenleft @Question less' equal less;
    sub SPC SPC less' by less_equal_less.liga;
    sub SPC equal' less by SPC;
    sub less' equal less by SPC;
  } less_equal_less.liga;

  # >=>
  lookup greater_equal_greater.liga {
    ignore sub [greater equal] greater' equal greater;
    ignore sub greater' equal greater [greater equal];
    sub SPC SPC greater' by greater_equal_greater.liga;
    sub SPC equal' greater by SPC;
    sub greater' equal greater by SPC;
  } greater_equal_greater.liga;

  # ==
  lookup equal_equal.liga {
    ignore sub [colon equal exclam less greater bar] equal' equal;
    ignore sub equal' equal [colon equal less greater bar];
    ignore sub parenleft @Question equal' equal;
    ignore sub parenleft @Question less equal' equal;
    sub SPC equal' by equal_equal.liga;
    sub equal' equal by SPC;
  } equal_equal.liga;

  # ===
  lookup equal_equal_equal.liga {
    ignore sub [equal less greater bar colon SPC] equal' equal equal;
    ignore sub equal' equal equal [equal less greater bar colon SPC];
    ignore sub parenleft @Question equal' equal equal;
    ignore sub parenleft @Question less equal' equal equal;
    sub SPC SPC equal' by equal_equal_equal.liga;
    sub SPC equal' equal by SPC;
    sub equal' equal equal by SPC;
  } equal_equal_equal.liga;

  # >===</
  lookup equal_equal_equal.liga__ALT__ {
    sub greater SPC SPC equal' less slash by equal_equal_equal.liga;
    sub greater SPC equal' equal less slash by SPC;
    sub greater equal' equal equal less slash by SPC;
    sub greater SPC SPC equal' SPC less_slash.liga by equal_equal_equal.liga;
    sub greater SPC equal' equal SPC less_slash.liga by SPC;
    sub greater equal' equal equal SPC less_slash.liga by SPC;
  } equal_equal_equal.liga__ALT__;

  # !=
  lookup exclam_equal.liga {
    ignore sub [exclam equal] exclam' equal;
    ignore sub exclam' equal equal;
    ignore sub parenleft @Question exclam' equal;
    ignore sub parenleft @Question less exclam' equal;
    sub SPC equal' by exclam_equal.liga;
    sub exclam' equal by SPC;
  } exclam_equal.liga;

  # !==
  lookup exclam_equal_equal.liga {
    ignore sub [exclam equal] exclam' equal equal;
    ignore sub exclam' equal equal [exclam equal];
    ignore sub parenleft @Question exclam' equal equal;
    ignore sub parenleft @Question less exclam' equal equal;
    sub SPC SPC equal' by exclam_equal_equal.liga;
    sub SPC equal' equal by SPC;
    sub exclam' equal equal by SPC;
  } exclam_equal_equal.liga;

  # =/=
  lookup equal_slash_equal.liga {
    ignore sub equal equal' slash equal;
    ignore sub equal' slash equal equal;
    ignore sub parenleft @Question equal' slash equal;
    ignore sub parenleft @Question less equal' slash equal;
    sub SPC SPC equal' by equal_slash_equal.liga;
    sub SPC slash' equal by SPC;
    sub equal' slash equal by SPC;
  } equal_slash_equal.liga;

  # =!=
  lookup equal_exclam_equal.liga {
    ignore sub equal equal' exclam equal;
    ignore sub equal' exclam equal equal;
    ignore sub parenleft @Question equal' exclam equal;
    ignore sub parenleft @Question less equal' exclam equal;
    sub SPC SPC equal' by equal_exclam_equal.liga;
    sub SPC exclam' equal by SPC;
    sub equal' exclam equal by SPC;
  } equal_exclam_equal.liga;

  # |=
  lookup bar_equal.liga {
    ignore sub [bar equal] bar' equal;
    ignore sub bar' equal [greater bar equal];
    sub SPC equal' by bar_equal.liga;
    sub bar' equal by SPC;
  } bar_equal.liga;

  # <=> <==> <== ==> => <=| |=> =<= =>= ======= >=< := =: :=: =:=
  lookup infinite_equal {
    @EqualStart = [equal.sta.seq equal.mid.seq];
    ignore sub exclam' equal equal;
    ignore sub bar bar' equal;
    ignore sub equal bar' bar;
    ignore sub parenleft @Question less' equal;
    ignore sub parenleft @Question less equal' [less greater bar equal];
    ignore sub parenleft @Question less equal' equal [less greater bar];
    ignore sub greater' equal SPC less_slash.liga;
    ignore sub greater' equal less slash;
    ignore sub greater' equal equal SPC less_slash.liga;
    ignore sub greater' equal equal less slash;
    ignore sub greater' equal equal equal SPC less_slash.liga;
    ignore sub greater' equal equal equal less slash;
    ignore sub greater equal' equal equal SPC less_slash.liga;
    ignore sub greater equal' equal equal less slash;
    ignore sub greater equal equal' equal SPC less_slash.liga;
    ignore sub greater equal equal' equal less slash;
    sub [less_equal.sta.seq less_equal.mid.seq greater_equal.sta.seq greater_equal.mid.seq bar_equal.sta.seq bar_equal.mid.seq @EqualStart] equal' [less greater bar equal] by equal.mid.seq;
    sub [less_equal.sta.seq less_equal.mid.seq greater_equal.sta.seq greater_equal.mid.seq bar_equal.sta.seq bar_equal.mid.seq @EqualStart] equal' by equal.end.seq;
    sub @EqualStart less' equal by less_equal.mid.seq;
    sub @EqualStart less' by less_equal.end.seq;
    sub less' equal by less_equal.sta.seq;
    sub @EqualStart greater' equal by greater_equal.mid.seq;
    sub @EqualStart greater' by greater_equal.end.seq;
    sub greater' equal by greater_equal.sta.seq;
    sub @EqualStart bar' equal by bar_equal.mid.seq;
    sub @EqualStart bar' by bar_equal.end.seq;
    sub bar' equal by bar_equal.sta.seq;
    ignore sub colon colon' equal;
    ignore sub equal.end.seq colon' colon;
    sub colon' equal by colon.case;
    sub [equal equal.end.seq] colon' by colon.case;
    sub equal' less equal by equal.sta.seq;
    ignore sub equal' less;
    sub equal' [less greater bar equal] by equal.sta.seq;
  } infinite_equal;

  # \\ \' \.
  lookup escape {

    @Escape = [asciicircum dollar quotedbl quotesingle grave period asterisk plus parenleft parenright bracketleft bracketright braceleft braceright bar slash backslash @Question];
    ignore sub backslash.liga backslash' @Escape;
    ignore sub backslash' percent percent;
    sub backslash' @Escape by backslash.liga;
  } escape;

  # --
  lookup hyphen_hyphen.liga {
    ignore sub [less greater hyphen bar] hyphen' hyphen;
    ignore sub hyphen' hyphen [less greater hyphen bar];
    ignore sub less [numbersign exclam] hyphen' hyphen;
    ignore sub parenleft @Question less exclam hyphen' hyphen;
    sub bar SPC hyphen' less @Var by hyphen_hyphen.liga;
    sub bar hyphen' hyphen less @Var by SPC;
    sub bar SPC hyphen' @Var by hyphen_hyphen.liga;
    sub bar hyphen' hyphen @Var by SPC;
    sub SPC hyphen' by hyphen_hyphen.liga;
    sub hyphen' hyphen by SPC;
  } hyphen_hyphen.liga;

  # --
  lookup hyphen_hyphen.liga__REGEX__ {
    ignore sub [less greater hyphen exclam] hyphen' hyphen less;
    sub SPC hyphen' less @Var by hyphen_hyphen.liga;
    sub hyphen' hyphen less @Var by SPC;
    sub bar SPC hyphen' @Var by hyphen_hyphen.liga;
    sub bar hyphen' hyphen @Var by SPC;
  } hyphen_hyphen.liga__REGEX__;

  # >--</
  lookup hyphen_hyphen.liga__ALT__ {
    sub greater SPC hyphen' less slash by hyphen_hyphen.liga;
    sub greater hyphen' hyphen less slash by SPC;
    sub greater SPC hyphen' SPC less_slash.liga by hyphen_hyphen.liga;
    sub greater hyphen' hyphen SPC less_slash.liga by SPC;
  } hyphen_hyphen.liga__ALT__;

  # ---
  lookup hyphen_hyphen_hyphen.liga {
    ignore sub [less greater hyphen bar SPC] hyphen' hyphen hyphen;
    ignore sub hyphen' hyphen hyphen [less greater hyphen bar SPC];
    ignore sub less hyphen' hyphen hyphen greater;
    sub SPC SPC hyphen' by hyphen_hyphen_hyphen.liga;
    sub SPC hyphen' hyphen by SPC;
    sub hyphen' hyphen hyphen by SPC;
  } hyphen_hyphen_hyphen.liga;

  # >---</
  lookup hyphen_hyphen_hyphen.liga__ALT__ {
    sub greater SPC SPC hyphen' less slash by hyphen_hyphen_hyphen.liga;
    sub greater SPC hyphen' hyphen less slash by SPC;
    sub greater hyphen' hyphen hyphen less slash by SPC;
    sub greater SPC SPC hyphen' SPC less_slash.liga by hyphen_hyphen_hyphen.liga;
    sub greater SPC hyphen' hyphen SPC less_slash.liga by SPC;
    sub greater hyphen' hyphen hyphen SPC less_slash.liga by SPC;
  } hyphen_hyphen_hyphen.liga__ALT__;

  # <!--
  lookup less_exclam_hyphen_hyphen.liga {
    ignore sub less less' exclam hyphen hyphen;
    ignore sub less' exclam hyphen hyphen hyphen;
    ignore sub parenleft @Question less' exclam hyphen hyphen;
    sub SPC SPC SPC hyphen' by less_exclam_hyphen_hyphen.liga;
    sub SPC SPC hyphen' hyphen by SPC;
    sub SPC exclam' hyphen hyphen by SPC;
    sub less' exclam hyphen hyphen by SPC;
  } less_exclam_hyphen_hyphen.liga;

  # <#--
  lookup less_numbersign_hyphen_hyphen.liga {
    ignore sub less less' numbersign hyphen hyphen;
    ignore sub less' numbersign hyphen hyphen hyphen;
    sub SPC SPC SPC hyphen' by less_numbersign_hyphen_hyphen.liga;
    sub SPC SPC hyphen' hyphen by SPC;
    sub SPC numbersign' hyphen hyphen by SPC;
    sub less' numbersign hyphen hyphen by SPC;
  } less_numbersign_hyphen_hyphen.liga;

  # <!---->
  lookup xml_empty_comment.liga {
    sub SPC SPC SPC SPC SPC SPC greater' by xml_empty_comment.liga;
    sub SPC SPC SPC SPC SPC hyphen' greater by SPC;
    sub SPC SPC SPC SPC hyphen' hyphen greater by SPC;
    sub SPC SPC SPC hyphen' hyphen hyphen greater by SPC;
    sub SPC SPC hyphen' hyphen hyphen hyphen greater by SPC;
    sub SPC exclam' hyphen hyphen hyphen hyphen greater by SPC;
    sub less' exclam hyphen hyphen hyphen hyphen greater by SPC;
  } xml_empty_comment.liga;

  # <-> <--> -> <- --> <-- >-> <-< |-> <-| ------- >-- --<
  lookup infinite_hyphen {
    @HyphenStart = [hyphen.sta.seq hyphen.mid.seq];
    ignore sub less' [exclam numbersign] hyphen hyphen;
    ignore sub [bar plus] bar' hyphen;
    ignore sub bar' hyphen hyphen @Var;
    ignore sub bar hyphen' hyphen @Var;
    ignore sub bar' hyphen hyphen less @Var;
    ignore sub bar hyphen' hyphen less @Var;
    ignore sub hyphen bar' bar;
    ignore sub hyphen hyphen' bar;
    ignore sub parenleft @Question less exclam hyphen' hyphen;
    ignore sub less' hyphen [plus slash @Digit];
    ignore sub hyphen' less slash;
    ignore sub greater' hyphen hyphen SPC less_slash.liga;
    ignore sub greater' hyphen hyphen less slash;
    ignore sub greater hyphen' hyphen SPC less_slash.liga;
    ignore sub greater hyphen' hyphen less slash;
    ignore sub greater' hyphen hyphen hyphen SPC less_slash.liga;
    ignore sub greater' hyphen hyphen hyphen less slash;
    ignore sub greater hyphen' hyphen hyphen SPC less_slash.liga;
    ignore sub greater hyphen' hyphen hyphen less slash;
    ignore sub greater hyphen hyphen' hyphen SPC less_slash.liga;
    ignore sub greater hyphen hyphen' hyphen less slash;
    sub @HyphenStart greater' hyphen by greater_hyphen.mid.seq;
    sub greater' hyphen [hyphen bar greater] by greater_hyphen.sta.seq;
    sub greater' hyphen less hyphen by greater_hyphen.sta.seq;
    ignore sub greater' hyphen;
    sub [greater_hyphen.mid.seq less_hyphen.sta.seq less_hyphen.mid.seq bar_hyphen.sta.seq bar_hyphen.mid.seq greater_hyphen.sta.seq @HyphenStart] hyphen' less by hyphen.mid.seq;
    sub hyphen' less hyphen by hyphen.sta.seq;
    ignore sub hyphen' less;
    sub greater' hyphen less hyphen by greater_hyphen.sta.seq;
    sub hyphen greater' hyphen less by greater_hyphen.mid.seq;
    ignore sub greater' hyphen less;
    sub [less_hyphen.sta.seq less_hyphen.mid.seq greater_hyphen.sta.seq greater_hyphen.mid.seq bar_hyphen.sta.seq bar_hyphen.mid.seq @HyphenStart] hyphen' [less greater bar hyphen] by hyphen.mid.seq;
    sub [less_hyphen.sta.seq less_hyphen.mid.seq greater_hyphen.sta.seq greater_hyphen.mid.seq bar_hyphen.sta.seq bar_hyphen.mid.seq @HyphenStart] hyphen' by hyphen.end.seq;
    sub @HyphenStart less' hyphen by less_hyphen.mid.seq;
    sub @HyphenStart less' by less_hyphen.end.seq;
    sub less' hyphen by less_hyphen.sta.seq;
    sub @HyphenStart greater' hyphen by greater_hyphen.mid.seq;
    sub @HyphenStart greater' by greater_hyphen.end.seq;
    sub greater' hyphen by greater_hyphen.sta.seq;
    sub @HyphenStart bar' hyphen by bar_hyphen.mid.seq;
    sub @HyphenStart bar' by bar_hyphen.end.seq;
    sub bar' hyphen by bar_hyphen.sta.seq;
    sub hyphen' [less greater bar hyphen] by hyphen.sta.seq;
  } infinite_hyphen;

  # <|||
  lookup less_bar_bar_bar.liga {
    ignore sub less less' bar bar bar;
    ignore sub less' bar bar bar [bar greater];
    sub SPC SPC SPC bar' by less_bar_bar_bar.liga;
    sub SPC SPC bar' bar by SPC;
    sub SPC bar' bar bar by SPC;
    sub less' bar bar bar by SPC;
  } less_bar_bar_bar.liga;

  # |||>
  lookup bar_bar_bar_greater.liga {
    ignore sub bar bar' bar bar greater;
    ignore sub bar' bar bar greater greater;
    sub SPC SPC SPC greater' by bar_bar_bar_greater.liga;
    sub SPC SPC bar' greater by SPC;
    sub SPC bar' bar greater by SPC;
    sub bar' bar bar greater by SPC;
  } bar_bar_bar_greater.liga;

  # <||
  lookup less_bar_bar.liga {
    ignore sub less less' bar bar;
    ignore sub less' bar bar [bar greater];
    sub SPC SPC bar' by less_bar_bar.liga;
    sub SPC bar' bar by SPC;
    sub less' bar bar by SPC;
  } less_bar_bar.liga;

  # ||>
  lookup bar_bar_greater.liga {
    ignore sub [hyphen less] bar' bar greater;
    ignore sub bar' bar greater greater;
    sub SPC SPC greater' by bar_bar_greater.liga;
    sub SPC bar' greater by SPC;
    sub bar' bar greater by SPC;
  } bar_bar_greater.liga;

  # <|
  lookup less_bar.liga {
    ignore sub less less' bar;
    ignore sub less' bar [bar greater];
    sub SPC bar' by less_bar.liga;
    sub less' bar by SPC;
  } less_bar.liga;

  # |>
  lookup bar_greater.liga {
    ignore sub [hyphen less bar] bar' greater;
    ignore sub bar' greater [greater equal];
    sub SPC greater' by bar_greater.liga;
    sub bar' greater by SPC;
  } bar_greater.liga;

  # <|>
  lookup less_bar_greater.liga {
    ignore sub less less' bar greater;
    ignore sub less' bar greater greater;
    sub SPC SPC greater' by less_bar_greater.liga;
    sub SPC bar' greater by SPC;
    sub less' bar greater by SPC;
  } less_bar_greater.liga;

  # _|_
  lookup underscore_bar_underscore.liga {
    ignore sub [underscore bracketleft @Comma] underscore' bar underscore;
    ignore sub underscore' bar underscore underscore;
    sub SPC SPC underscore' by underscore_bar_underscore.liga;
    sub SPC bar' underscore by SPC;
    sub underscore' bar underscore by SPC;
  } underscore_bar_underscore.liga;

  @BgJ = [J.bg J.bg.cv07];
  @BgQ = [Q.bg Q.bg.cv01];

  # [TRACE]
  lookup tag_trace {
    sub SPC SPC SPC SPC SPC SPC bracketright' by tag_trace.liga;
    sub SPC SPC SPC SPC SPC E' bracketright by SPC;
    sub SPC SPC SPC SPC C' E bracketright by SPC;
    sub SPC SPC SPC A' C E bracketright by SPC;
    sub SPC SPC R' A C E bracketright by SPC;
    sub SPC T' R A C E bracketright by SPC;
    sub bracketleft' T R A C E bracketright by SPC;
  } tag_trace;

  # [DEBUG]
  lookup tag_debug {
    sub SPC SPC SPC SPC SPC SPC bracketright' by tag_debug.liga;
    sub SPC SPC SPC SPC SPC G' bracketright by SPC;
    sub SPC SPC SPC SPC U' G bracketright by SPC;
    sub SPC SPC SPC B' U G bracketright by SPC;
    sub SPC SPC E' B U G bracketright by SPC;
    sub SPC D' E B U G bracketright by SPC;
    sub bracketleft' D E B U G bracketright by SPC;
  } tag_debug;

  # [INFO]
  lookup tag_info {
    sub SPC SPC SPC SPC SPC bracketright' by tag_info.liga;
    sub SPC SPC SPC SPC O' bracketright by SPC;
    sub SPC SPC SPC F' O bracketright by SPC;
    sub SPC SPC N' F O bracketright by SPC;
    sub SPC I' N F O bracketright by SPC;
    sub bracketleft' I N F O bracketright by SPC;
  } tag_info;

  # [WARN]
  lookup tag_warn {
    sub SPC SPC SPC SPC SPC bracketright' by tag_warn.liga;
    sub SPC SPC SPC SPC N' bracketright by SPC;
    sub SPC SPC SPC R' N bracketright by SPC;
    sub SPC SPC A' R N bracketright by SPC;
    sub SPC W' A R N bracketright by SPC;
    sub bracketleft' W A R N bracketright by SPC;
  } tag_warn;

  # [ERROR]
  lookup tag_error {
    sub SPC SPC SPC SPC SPC SPC bracketright' by tag_error.liga;
    sub SPC SPC SPC SPC SPC R' bracketright by SPC;
    sub SPC SPC SPC SPC O' R bracketright by SPC;
    sub SPC SPC SPC R' O R bracketright by SPC;
    sub SPC SPC R' R O R bracketright by SPC;
    sub SPC E' R R O R bracketright by SPC;
    sub bracketleft' E R R O R bracketright by SPC;
  } tag_error;

  # [FATAL]
  lookup tag_fatal {
    sub SPC SPC SPC SPC SPC SPC bracketright' by tag_fatal.liga;
    sub SPC SPC SPC SPC SPC L' bracketright by SPC;
    sub SPC SPC SPC SPC A' L bracketright by SPC;
    sub SPC SPC SPC T' A L bracketright by SPC;
    sub SPC SPC A' T A L bracketright by SPC;
    sub SPC F' A T A L bracketright by SPC;
    sub bracketleft' F A T A L bracketright by SPC;
  } tag_fatal;

  # [TODO]
  lookup tag_todo {
    sub SPC SPC SPC SPC SPC bracketright' by tag_todo.liga;
    sub SPC SPC SPC SPC O' bracketright by SPC;
    sub SPC SPC SPC D' O bracketright by SPC;
    sub SPC SPC O' D O bracketright by SPC;
    sub SPC T' O D O bracketright by SPC;
    sub bracketleft' T O D O bracketright by SPC;
  } tag_todo;

  # [FIXME]
  lookup tag_fixme {
    sub SPC SPC SPC SPC SPC SPC bracketright' by tag_fixme.liga;
    sub SPC SPC SPC SPC SPC E' bracketright by SPC;
    sub SPC SPC SPC SPC M' E bracketright by SPC;
    sub SPC SPC SPC X' M E bracketright by SPC;
    sub SPC SPC I' X M E bracketright by SPC;
    sub SPC F' I X M E bracketright by SPC;
    sub bracketleft' F I X M E bracketright by SPC;
  } tag_fixme;

  # [NOTE]
  lookup tag_note {
    sub SPC SPC SPC SPC SPC bracketright' by tag_note.liga;
    sub SPC SPC SPC SPC E' bracketright by SPC;
    sub SPC SPC SPC T' E bracketright by SPC;
    sub SPC SPC O' T E bracketright by SPC;
    sub SPC N' O T E bracketright by SPC;
    sub bracketleft' N O T E bracketright by SPC;
  } tag_note;

  # [HACK]
  lookup tag_hack {
    sub SPC SPC SPC SPC SPC bracketright' by tag_hack.liga;
    sub SPC SPC SPC SPC K' bracketright by SPC;
    sub SPC SPC SPC C' K bracketright by SPC;
    sub SPC SPC A' C K bracketright by SPC;
    sub SPC H' A C K bracketright by SPC;
    sub bracketleft' H A C K bracketright by SPC;
  } tag_hack;

  # [MARK]
  lookup tag_mark {
    sub SPC SPC SPC SPC SPC bracketright' by tag_mark.liga;
    sub SPC SPC SPC SPC K' bracketright by SPC;
    sub SPC SPC SPC R' K bracketright by SPC;
    sub SPC SPC A' R K bracketright by SPC;
    sub SPC M' A R K bracketright by SPC;
    sub bracketleft' M A R K bracketright by SPC;
  } tag_mark;

  # [EROR]
  lookup tag_eror {
    sub SPC SPC SPC SPC SPC bracketright' by tag_eror.liga;
    sub SPC SPC SPC SPC R' bracketright by SPC;
    sub SPC SPC SPC O' R bracketright by SPC;
    sub SPC SPC R' O R bracketright by SPC;
    sub SPC E' R O R bracketright by SPC;
    sub bracketleft' E R O R bracketright by SPC;
  } tag_eror;

  # [WARNING]
  lookup tag_warning {
    sub SPC SPC SPC SPC SPC SPC SPC SPC bracketright' by tag_warning.liga;
    sub SPC SPC SPC SPC SPC SPC SPC G' bracketright by SPC;
    sub SPC SPC SPC SPC SPC SPC N' G bracketright by SPC;
    sub SPC SPC SPC SPC SPC I' N G bracketright by SPC;
    sub SPC SPC SPC SPC N' I N G bracketright by SPC;
    sub SPC SPC SPC R' N I N G bracketright by SPC;
    sub SPC SPC A' R N I N G bracketright by SPC;
    sub SPC W' A R N I N G bracketright by SPC;
    sub bracketleft' W A R N I N G bracketright by SPC;
  } tag_warning;

  # todo))
  lookup tag_todo_alt {
    ignore sub [parenleft period period_period.liga period_period_period.liga @Comma colon colon_colon.liga asciitilde greater_hyphen.end.seq greater_hyphen.end.seq.cv01 hyphen_greater.liga hyphen_greater.liga.cv01 ampersand ampersand.cv01 dollar dollar.cv01 hyphen hyphen.end.seq @Var] @T' @O @D @O parenright parenright;
    ignore sub @T' @O @D @O parenright parenright [semicolon parenright period];
    ignore sub [colon colon_colon.liga comma] @Space @T' @O @D @O parenright parenright;
    sub SPC SPC SPC SPC SPC parenright' by tag_todo.liga;
    sub SPC SPC SPC SPC parenright' parenright by SPC;
    sub SPC SPC SPC @O' parenright parenright by SPC;
    sub SPC SPC @D' @O parenright parenright by SPC;
    sub SPC @O' @D @O parenright parenright by SPC;
    sub @T' @O @D @O parenright parenright by SPC;
  } tag_todo_alt;

  # fixme))
  lookup tag_fixme_alt {
    ignore sub [parenleft period period_period.liga period_period_period.liga @Comma colon colon_colon.liga asciitilde greater_hyphen.end.seq greater_hyphen.end.seq.cv01 hyphen_greater.liga hyphen_greater.liga.cv01 ampersand ampersand.cv01 dollar dollar.cv01 hyphen hyphen.end.seq @Var] @F' @I @X @M @E parenright parenright;
    ignore sub @F' @I @X @M @E parenright parenright [semicolon parenright period];
    ignore sub [colon colon_colon.liga comma] @Space @F' @I @X @M @E parenright parenright;
    sub SPC SPC SPC SPC SPC SPC parenright' by tag_fixme.liga;
    sub SPC SPC SPC SPC SPC parenright' parenright by SPC;
    sub SPC SPC SPC SPC @E' parenright parenright by SPC;
    sub SPC SPC SPC @M' @E parenright parenright by SPC;
    sub SPC SPC @X' @M @E parenright parenright by SPC;
    sub SPC @I' @X @M @E parenright parenright by SPC;
    sub @F' @I @X @M @E parenright parenright by SPC;
  } tag_fixme_alt;

} calt;

feature cv01 {

  cvParameters {
    FeatUILabelNameID {
      name "CV01: Normalize special symbols";
    };
  };

  sub dollar by dollar.cv01;
  sub percent by percent.cv01;
  sub ampersand by ampersand.cv01;
  sub ampersand_ampersand.liga by ampersand_ampersand.liga.cv01;
  sub ampersand_ampersand_ampersand.liga by ampersand_ampersand_ampersand.liga.cv01;
  sub at by at.cv01;
  sub asciitilde_at.liga by asciitilde_at.liga.cv01;
  sub Q by Q.cv01;
  sub Q.bg by Q.bg.cv01;
  sub less_equal_less.liga by less_equal_less.liga.cv01;
  sub greater_equal_greater.liga by greater_equal_greater.liga.cv01;
  sub less_exclam_hyphen_hyphen.liga by less_exclam_hyphen_hyphen.liga.cv01;
  sub less_numbersign_hyphen_hyphen.liga by less_numbersign_hyphen_hyphen.liga.cv01;
  sub xml_empty_comment.liga by xml_empty_comment.liga.cv01;
  sub less_equal.sta.seq by less_equal.sta.seq.cv01;
  sub greater_equal.end.seq by greater_equal.end.seq.cv01;
  sub less_hyphen.sta.seq by less_hyphen.sta.seq.cv01;
  sub greater_hyphen.end.seq by greater_hyphen.end.seq.cv01;

} cv01;

feature cv02 {

  cvParameters {
    FeatUILabelNameID {
      name "CV02: Alternative a with top arm, no effect in italic style";
    };
  };

  sub a by a.cv02;
  sub aacute by aacute.cv02;
  sub abreve by abreve.cv02;
  sub abreveacute by abreveacute.cv02;
  sub abrevedotbelow by abrevedotbelow.cv02;
  sub abrevegrave by abrevegrave.cv02;
  sub abrevehookabove by abrevehookabove.cv02;
  sub abrevetilde by abrevetilde.cv02;
  sub acaron by acaron.cv02;
  sub acircumflex by acircumflex.cv02;
  sub acircumflexacute by acircumflexacute.cv02;
  sub acircumflexdotbelow by acircumflexdotbelow.cv02;
  sub acircumflexgrave by acircumflexgrave.cv02;
  sub acircumflexhookabove by acircumflexhookabove.cv02;
  sub acircumflextilde by acircumflextilde.cv02;
  sub adieresis by adieresis.cv02;
  sub adotbelow by adotbelow.cv02;
  sub agrave by agrave.cv02;
  sub ahookabove by ahookabove.cv02;
  sub amacron by amacron.cv02;
  sub aogonek by aogonek.cv02;
  sub aring by aring.cv02;
  sub atilde by atilde.cv02;
  sub a-cy by a-cy.cv02;
  sub ordfeminine by ordfeminine.cv02;

} cv02;

feature cv03 {

  cvParameters {
    FeatUILabelNameID {
      name "CV03: Alternative i without left bottom bar";
    };
  };

  sub i by i.cv03;
  sub iacute by iacute.cv03;
  sub ibreve by ibreve.cv03;
  sub icaron by icaron.cv03;
  sub icircumflex by icircumflex.cv03;
  sub idieresis by idieresis.cv03;
  sub idotaccent by idotaccent.cv03;
  sub idotbelow by idotbelow.cv03;
  sub idotless by idotless.cv03;
  sub igrave by igrave.cv03;
  sub ihookabove by ihookabove.cv03;
  sub imacron by imacron.cv03;
  sub iogonek by iogonek.cv03;
  sub itilde by itilde.cv03;
  sub idotbelowdotless by idotbelowdotless.cv03;
  sub iogonekdotless by iogonekdotless.cv03;
  sub i-cy by i-cy.cv03;
  sub yi-cy by yi-cy.cv03;

} cv03;

feature cv04 {

  cvParameters {
    FeatUILabelNameID {
      name "CV04: Alternative l with left bottom bar, like consolas, will be overrided by cv35 in italic style";
    };
  };

  sub l by l.cv04;
  sub lacute by lacute.cv04;
  sub lcaron by lcaron.cv04;
  sub lcommaaccent by lcommaaccent.cv04;
  sub ldot by ldot.cv04;
  sub lslash by lslash.cv04;
  sub one by one.cv04;
  sub one.dnom by one.dnom.cv04;
  sub one.numr by one.numr.cv04;
  sub oneinferior by oneinferior.cv04;
  sub onesuperior by onesuperior.cv04;

} cv04;

feature cv05 {

  cvParameters {
    FeatUILabelNameID {
      name "CV05: Alternative g in double story style, no effect in italic style";
    };
  };

  sub g by g.cv05;
  sub gacute by gacute.cv05;
  sub gbreve by gbreve.cv05;
  sub gcaron by gcaron.cv05;
  sub gcircumflex by gcircumflex.cv05;
  sub gcommaaccent by gcommaaccent.cv05;
  sub gdotaccent by gdotaccent.cv05;

} cv05;

feature cv06 {

  cvParameters {
    FeatUILabelNameID {
      name "CV06: Alternative i without bottom bar, no effect in italic style";
    };
  };

  sub i by i.cv06;
  sub iacute by iacute.cv06;
  sub ibreve by ibreve.cv06;
  sub icaron by icaron.cv06;
  sub icircumflex by icircumflex.cv06;
  sub idieresis by idieresis.cv06;
  sub idotaccent by idotaccent.cv06;
  sub idotbelow by idotbelow.cv06;
  sub idotless by idotless.cv06;
  sub igrave by igrave.cv06;
  sub ihookabove by ihookabove.cv06;
  sub imacron by imacron.cv06;
  sub iogonek by iogonek.cv06;
  sub itilde by itilde.cv06;
  sub idotbelowdotless by idotbelowdotless.cv06;
  sub iogonekdotless by iogonekdotless.cv06;
  sub i-cy by i-cy.cv06;
  sub yi-cy by yi-cy.cv06;
  sub i.cv03 by i.cv06;
  sub iacute.cv03 by iacute.cv06;
  sub ibreve.cv03 by ibreve.cv06;
  sub icaron.cv03 by icaron.cv06;
  sub icircumflex.cv03 by icircumflex.cv06;
  sub idieresis.cv03 by idieresis.cv06;
  sub idotaccent.cv03 by idotaccent.cv06;
  sub idotbelow.cv03 by idotbelow.cv06;
  sub idotless.cv03 by idotless.cv06;
  sub igrave.cv03 by igrave.cv06;
  sub ihookabove.cv03 by ihookabove.cv06;
  sub imacron.cv03 by imacron.cv06;
  sub iogonek.cv03 by iogonek.cv06;
  sub itilde.cv03 by itilde.cv06;
  sub idotbelowdotless.cv03 by idotbelowdotless.cv06;
  sub iogonekdotless.cv03 by iogonekdotless.cv06;
  sub i-cy.cv03 by i-cy.cv06;
  sub yi-cy.cv03 by yi-cy.cv06;

} cv06;

feature cv07 {

  cvParameters {
    FeatUILabelNameID {
      name "CV07: Alternative J without top bar, no effect in italic style";
    };
  };

  sub J by J.cv07;
  sub Jcircumflex by Jcircumflex.cv07;
  sub Je-cy by Je-cy.cv07;
  sub J.bg by J.bg.cv07;

} cv07;

feature cv08 {

  cvParameters {
    FeatUILabelNameID {
      name "CV08: Alternative r with bottom bar, no effect in italic style";
    };
  };

  sub r by r.cv08;
  sub racute by racute.cv08;
  sub rcaron by rcaron.cv08;
  sub rcommaaccent by rcommaaccent.cv08;

} cv08;

feature cv09 {

  cvParameters {
    FeatUILabelNameID {
      name "CV09: Alternative 7 with middle bar, no effect in italic style";
    };
  };

  sub seven by seven.cv09;
  sub seven.dnom by seven.dnom.cv09;
  sub seven.numr by seven.numr.cv09;
  sub seveninferior by seveninferior.cv09;
  sub sevensuperior by sevensuperior.cv09;

} cv09;

feature cv10 {

  cvParameters {
    FeatUILabelNameID {
      name "CV10: Alternative Z and z with middle bar, no effect in italic style";
    };
  };

  sub Z by Z.cv10;
  sub Zacute by Zacute.cv10;
  sub Zcaron by Zcaron.cv10;
  sub Zdotaccent by Zdotaccent.cv10;
  sub z by z.cv10;
  sub zacute by zacute.cv10;
  sub zcaron by zcaron.cv10;
  sub zdotaccent by zdotaccent.cv10;

} cv10;

feature cv11 {

  cvParameters {
    FeatUILabelNameID {
      name "CV11: Alternative f with bottom bar";
    };
  };

  sub f by f.cv11;

} cv11;

feature cv31 {

  cvParameters {
    FeatUILabelNameID {
      name "CV31: [Italic Only] Alternative italic a with top arm";
    };
  };

  # Placeholder
  sub EMquad by space;

} cv31;

feature cv32 {

  cvParameters {
    FeatUILabelNameID {
      name "CV32: [Italic Only] Alternative Italic f without bottom tail";
    };
  };

  # Placeholder
  sub EMquad by space;

} cv32;

feature cv33 {

  cvParameters {
    FeatUILabelNameID {
      name "CV33: [Italic Only] Alternative Italic i and j with left bottom bar and horizen top bar";
    };
  };

  # Placeholder
  sub EMquad by space;

} cv33;

feature cv34 {

  cvParameters {
    FeatUILabelNameID {
      name "CV34: [Italic Only] Alternative Italic k without center circle";
    };
  };

  # Placeholder
  sub EMquad by space;

} cv34;

feature cv35 {

  cvParameters {
    FeatUILabelNameID {
      name "CV35: [Italic Only] Alternative Italic l without center tail";
    };
  };

  # Placeholder
  sub EMquad by space;

} cv35;

feature cv36 {

  cvParameters {
    FeatUILabelNameID {
      name "CV36: [Italic Only] Alternative Italic x without top and bottom tails";
    };
  };

  # Placeholder
  sub EMquad by space;

} cv36;

feature cv37 {

  cvParameters {
    FeatUILabelNameID {
      name "CV37: [Italic Only] Alternative Italic y with straight intersection";
    };
  };

  # Placeholder
  sub EMquad by space;

} cv37;

feature cv38 {

  cvParameters {
    FeatUILabelNameID {
      name "CV38: [Italic Only] Alternative italic g in double story style";
    };
  };

  # Placeholder
  sub EMquad by space;

} cv38;

feature cv39 {

  cvParameters {
    FeatUILabelNameID {
      name "CV39: [Italic Only] Alternative Italic i without bottom bar";
    };
  };

  # Placeholder
  sub EMquad by space;

} cv39;

feature cv40 {

  cvParameters {
    FeatUILabelNameID {
      name "CV40: [Italic Only] Alternative italic J without top bar";
    };
  };

  # Placeholder
  sub EMquad by space;

} cv40;

feature cv41 {

  cvParameters {
    FeatUILabelNameID {
      name "CV41: [Italic Only] Alternative italic r with bottom bar";
    };
  };

  # Placeholder
  sub EMquad by space;

} cv41;

feature cv42 {

  cvParameters {
    FeatUILabelNameID {
      name "CV42: [Italic Only] Alternative italic 7 with middle bar";
    };
  };

  # Placeholder
  sub EMquad by space;

} cv42;

feature cv43 {

  cvParameters {
    FeatUILabelNameID {
      name "CV43: [Italic Only] Alternative italic Z and z with middle bar";
    };
  };

  # Placeholder
  sub EMquad by space;

} cv43;

feature cv44 {

  cvParameters {
    FeatUILabelNameID {
      name "CV44: [Italic Only] Alternative Italic f with bottom bar";
    };
  };

  # Placeholder
  sub EMquad by space;

} cv44;

feature cv61 {

  cvParameters {
    FeatUILabelNameID {
      name "CV61: Alternative , and ; with straight tail";
    };
  };

  sub comma by comma.cv61;
  sub semicolon by semicolon.cv61;
  sub semicolon_semicolon.liga by semicolon_semicolon.liga.cv61;
  sub semicolon_semicolon_semicolon.liga by semicolon_semicolon_semicolon.liga.cv61;
  sub questiongreek by questiongreek.cv61;

} cv61;

feature cv62 {

  cvParameters {
    FeatUILabelNameID {
      name "CV62: Alternative ? with larger openings";
    };
  };

  sub question by question.cv62;
  sub questiondown by questiondown.cv62;
  sub question_question.liga by question_question.liga.cv62;
  sub question_question_question.liga by question_question_question.liga.cv62;
  sub question_colon.liga by question_colon.liga.cv62;
  sub colon_question.liga by colon_question.liga.cv62;
  sub colon_question_greater.liga by colon_question_greater.liga.cv62;
  sub question_period.liga by question_period.liga.cv62;
  sub period_question.liga by period_question.liga.cv62;
  sub numbersign_question.liga by numbersign_question.liga.cv62;

} cv62;

feature cv63 {

  cvParameters {
    FeatUILabelNameID {
      name "CV63: Alternative <= in arrow style";
    };
  };

  sub less_equal.liga by less_equal.liga.cv63;

} cv63;

feature cv64 {

  cvParameters {
    FeatUILabelNameID {
      name "CV64: Alternative <= and >= with horizen bottom bar";
    };
  };

  sub less_equal.liga by less_equal.liga.cv64;
  sub greater_equal.liga by greater_equal.liga.cv64;

} cv64;

feature cv65 {

  cvParameters {
    FeatUILabelNameID {
      name "CV65: Alternative & in handwriting style";
    };
  };

  sub ampersand by ampersand.cv65;
  sub ampersand_ampersand.liga by ampersand_ampersand.liga.cv65;
  sub ampersand_ampersand_ampersand.liga by ampersand_ampersand_ampersand.liga.cv65;
  sub ampersand.cv01 by ampersand.cv65;
  sub ampersand_ampersand.liga.cv01 by ampersand_ampersand.liga.cv65;
  sub ampersand_ampersand_ampersand.liga.cv01 by ampersand_ampersand_ampersand.liga.cv65;

} cv65;

feature ss01 {

  featureNames {
    name "SS01: Broken multiple equals ligatures";
  };

  sub equal_equal.liga by equal_equal.liga.ss01;
  sub equal_equal_equal.liga by equal_equal_equal.liga.ss01;
  sub exclam_equal.liga by exclam_equal.liga.ss01;
  sub exclam_equal_equal.liga by exclam_equal_equal.liga.ss01;
  sub equal_slash_equal.liga by equal_slash_equal.liga.ss01;

} ss01;

feature ss02 {

  featureNames {
    name "SS02: Broken compare and equal ligatures";
  };

  sub less_equal.liga by less_equal.liga.ss02;
  sub greater_equal.liga by greater_equal.liga.ss02;

} ss02;

feature ss03 {

  featureNames {
    name "SS03: Allow to use any case in all tags";
  };

  # [trace]
  lookup tag_trace.liga.ss03 {
    sub SPC SPC SPC SPC SPC SPC bracketright' by tag_trace.liga;
    sub SPC SPC SPC SPC SPC @E' bracketright by SPC;
    sub SPC SPC SPC SPC @C' @E bracketright by SPC;
    sub SPC SPC SPC @A' @C @E bracketright by SPC;
    sub SPC SPC @R' @A @C @E bracketright by SPC;
    sub SPC @T' @R @A @C @E bracketright by SPC;
    sub bracketleft' @T @R @A @C @E bracketright by SPC;
  } tag_trace.liga.ss03;

  # [debug]
  lookup tag_debug.liga.ss03 {
    sub SPC SPC SPC SPC SPC SPC bracketright' by tag_debug.liga;
    sub SPC SPC SPC SPC SPC @G' bracketright by SPC;
    sub SPC SPC SPC SPC @U' @G bracketright by SPC;
    sub SPC SPC SPC @B' @U @G bracketright by SPC;
    sub SPC SPC @E' @B @U @G bracketright by SPC;
    sub SPC @D' @E @B @U @G bracketright by SPC;
    sub bracketleft' @D @E @B @U @G bracketright by SPC;
  } tag_debug.liga.ss03;

  # [info]
  lookup tag_info.liga.ss03 {
    sub SPC SPC SPC SPC SPC bracketright' by tag_info.liga;
    sub SPC SPC SPC SPC @O' bracketright by SPC;
    sub SPC SPC SPC @F' @O bracketright by SPC;
    sub SPC SPC @N' @F @O bracketright by SPC;
    sub SPC @I' @N @F @O bracketright by SPC;
    sub bracketleft' @I @N @F @O bracketright by SPC;
  } tag_info.liga.ss03;

  # [warn]
  lookup tag_warn.liga.ss03 {
    sub SPC SPC SPC SPC SPC bracketright' by tag_warn.liga;
    sub SPC SPC SPC SPC @N' bracketright by SPC;
    sub SPC SPC SPC @R' @N bracketright by SPC;
    sub SPC SPC @A' @R @N bracketright by SPC;
    sub SPC @W' @A @R @N bracketright by SPC;
    sub bracketleft' @W @A @R @N bracketright by SPC;
  } tag_warn.liga.ss03;

  # [error]
  lookup tag_error.liga.ss03 {
    sub SPC SPC SPC SPC SPC SPC bracketright' by tag_error.liga;
    sub SPC SPC SPC SPC SPC @R' bracketright by SPC;
    sub SPC SPC SPC SPC @O' @R bracketright by SPC;
    sub SPC SPC SPC @R' @O @R bracketright by SPC;
    sub SPC SPC @R' @R @O @R bracketright by SPC;
    sub SPC @E' @R @R @O @R bracketright by SPC;
    sub bracketleft' @E @R @R @O @R bracketright by SPC;
  } tag_error.liga.ss03;

  # [fatal]
  lookup tag_fatal.liga.ss03 {
    sub SPC SPC SPC SPC SPC SPC bracketright' by tag_fatal.liga;
    sub SPC SPC SPC SPC SPC @L' bracketright by SPC;
    sub SPC SPC SPC SPC @A' @L bracketright by SPC;
    sub SPC SPC SPC @T' @A @L bracketright by SPC;
    sub SPC SPC @A' @T @A @L bracketright by SPC;
    sub SPC @F' @A @T @A @L bracketright by SPC;
    sub bracketleft' @F @A @T @A @L bracketright by SPC;
  } tag_fatal.liga.ss03;

  # [todo]
  lookup tag_todo.liga.ss03 {
    sub SPC SPC SPC SPC SPC bracketright' by tag_todo.liga;
    sub SPC SPC SPC SPC @O' bracketright by SPC;
    sub SPC SPC SPC @D' @O bracketright by SPC;
    sub SPC SPC @O' @D @O bracketright by SPC;
    sub SPC @T' @O @D @O bracketright by SPC;
    sub bracketleft' @T @O @D @O bracketright by SPC;
  } tag_todo.liga.ss03;

  # [fixme]
  lookup tag_fixme.liga.ss03 {
    sub SPC SPC SPC SPC SPC SPC bracketright' by tag_fixme.liga;
    sub SPC SPC SPC SPC SPC @E' bracketright by SPC;
    sub SPC SPC SPC SPC @M' @E bracketright by SPC;
    sub SPC SPC SPC @X' @M @E bracketright by SPC;
    sub SPC SPC @I' @X @M @E bracketright by SPC;
    sub SPC @F' @I @X @M @E bracketright by SPC;
    sub bracketleft' @F @I @X @M @E bracketright by SPC;
  } tag_fixme.liga.ss03;

  # [note]
  lookup tag_note.liga.ss03 {
    sub SPC SPC SPC SPC SPC bracketright' by tag_note.liga;
    sub SPC SPC SPC SPC @E' bracketright by SPC;
    sub SPC SPC SPC @T' @E bracketright by SPC;
    sub SPC SPC @O' @T @E bracketright by SPC;
    sub SPC @N' @O @T @E bracketright by SPC;
    sub bracketleft' @N @O @T @E bracketright by SPC;
  } tag_note.liga.ss03;

  # [hack]
  lookup tag_hack.liga.ss03 {
    sub SPC SPC SPC SPC SPC bracketright' by tag_hack.liga;
    sub SPC SPC SPC SPC @K' bracketright by SPC;
    sub SPC SPC SPC @C' @K bracketright by SPC;
    sub SPC SPC @A' @C @K bracketright by SPC;
    sub SPC @H' @A @C @K bracketright by SPC;
    sub bracketleft' @H @A @C @K bracketright by SPC;
  } tag_hack.liga.ss03;

  # [mark]
  lookup tag_mark.liga.ss03 {
    sub SPC SPC SPC SPC SPC bracketright' by tag_mark.liga;
    sub SPC SPC SPC SPC @K' bracketright by SPC;
    sub SPC SPC SPC @R' @K bracketright by SPC;
    sub SPC SPC @A' @R @K bracketright by SPC;
    sub SPC @M' @A @R @K bracketright by SPC;
    sub bracketleft' @M @A @R @K bracketright by SPC;
  } tag_mark.liga.ss03;

  # [eror]
  lookup tag_eror.liga.ss03 {
    sub SPC SPC SPC SPC SPC bracketright' by tag_eror.liga;
    sub SPC SPC SPC SPC @R' bracketright by SPC;
    sub SPC SPC SPC @O' @R bracketright by SPC;
    sub SPC SPC @R' @O @R bracketright by SPC;
    sub SPC @E' @R @O @R bracketright by SPC;
    sub bracketleft' @E @R @O @R bracketright by SPC;
  } tag_eror.liga.ss03;

  # [warning]
  lookup tag_warning.liga.ss03 {
    sub SPC SPC SPC SPC SPC SPC SPC SPC bracketright' by tag_warning.liga;
    sub SPC SPC SPC SPC SPC SPC SPC @G' bracketright by SPC;
    sub SPC SPC SPC SPC SPC SPC @N' @G bracketright by SPC;
    sub SPC SPC SPC SPC SPC @I' @N @G bracketright by SPC;
    sub SPC SPC SPC SPC @N' @I @N @G bracketright by SPC;
    sub SPC SPC SPC @R' @N @I @N @G bracketright by SPC;
    sub SPC SPC @A' @R @N @I @N @G bracketright by SPC;
    sub SPC @W' @A @R @N @I @N @G bracketright by SPC;
    sub bracketleft' @W @A @R @N @I @N @G bracketright by SPC;
  } tag_warning.liga.ss03;

} ss03;

feature ss04 {

  featureNames {
    name "SS04: Broken multiple underscores ligatures";
  };

  sub underscore_underscore.liga by underscore_underscore.liga.ss04;
  sub numbersign_underscore_underscore.liga by numbersign_underscore_underscore.liga.ss04;

} ss04;

feature ss05 {

  featureNames {
    name "SS05: Revert thin backslash in escape symbols";
  };

  sub backslash.liga by backslash;

} ss05;

feature ss06 {

  featureNames {
    name "SS06: [Italic Only]$$$Break connected strokes between italic letters";
  };

  # Placeholder
  sub EMquad by space;

} ss06;

feature ss07 {

  featureNames {
    name "SS07: Relax the conditions for multiple greaters ligatures";
  };

  # >>
  lookup relax_greater_greater.liga {
    ignore sub [greater slash less] greater' greater;
    ignore sub greater' greater greater;
    sub SPC greater' by greater_greater.liga;
    sub greater' greater by SPC;
  } relax_greater_greater.liga;

  # >>>
  lookup relax_greater_greater_greater.liga {
    ignore sub greater greater' greater greater;
    ignore sub greater' greater greater greater;
    sub SPC SPC greater' by greater_greater_greater.liga;
    sub SPC greater' greater by SPC;
    sub greater' greater greater by SPC;
  } relax_greater_greater_greater.liga;

} ss07;

feature ss08 {

  featureNames {
    name "SS08: Double headed arrows and reverse arrows ligatures";
  };

  # <<-
  lookup less_less_hyphen.liga.ss08 {
    ignore sub [less hyphen] less' less hyphen;
    ignore sub less' less hyphen [less greater hyphen];
    sub SPC less_less.liga' hyphen by SPC;
    sub SPC SPC hyphen' by less_less_hyphen.liga.ss08;
    sub SPC less' hyphen by SPC;
    sub less' less hyphen by SPC;
  } less_less_hyphen.liga.ss08;

  # >>-
  lookup greater_greater_hyphen.liga.ss08 {
    ignore sub [greater hyphen] greater' greater hyphen;
    ignore sub greater' greater hyphen [hyphen greater less];
    sub SPC greater_greater.liga' hyphen by SPC;
    sub SPC SPC hyphen' by greater_greater_hyphen.liga.ss08;
    sub SPC greater' hyphen by SPC;
    sub greater' greater hyphen by SPC;
  } greater_greater_hyphen.liga.ss08;

  # <<=
  lookup less_less_equal.liga.ss08 {
    ignore sub [equal less] less' less equal;
    ignore sub less' less equal [equal greater less];
    sub SPC less_less.liga' equal by SPC;
    sub SPC SPC equal' by less_less_equal.liga.ss08;
    sub SPC less' equal by SPC;
    sub less' less equal by SPC;
  } less_less_equal.liga.ss08;

  # >>=
  lookup greater_greater_equal.liga.ss08 {
    ignore sub [greater equal] greater' greater equal;
    ignore sub greater' greater equal [equal greater less];
    sub SPC greater_greater.liga' equal by SPC;
    sub SPC SPC equal' by greater_greater_equal.liga.ss08;
    sub SPC greater' equal by SPC;
    sub greater' greater equal by SPC;
  } greater_greater_equal.liga.ss08;

  # -<<
  lookup hyphen_less_less.liga.ss08 {
    ignore sub [hyphen less greater] hyphen' less less;
    ignore sub hyphen' less less [less hyphen];
    sub SPC SPC less_less.liga' by hyphen_less_less.liga.ss08;
    sub hyphen' SPC less_less.liga by SPC;
    sub SPC SPC less' by hyphen_less_less.liga.ss08;
    sub SPC less' less by SPC;
    sub hyphen' less less by SPC;
  } hyphen_less_less.liga.ss08;

  # ->>
  lookup hyphen_greater_greater.liga.ss08 {
    ignore sub [hyphen greater less] hyphen' greater greater;
    ignore sub hyphen' greater greater [greater hyphen];
    sub SPC SPC greater_greater.liga' by hyphen_greater_greater.liga.ss08;
    sub hyphen' SPC greater_greater.liga by SPC;
    sub SPC SPC greater' by hyphen_greater_greater.liga.ss08;
    sub SPC greater' greater by SPC;
    sub hyphen' greater greater by SPC;
  } hyphen_greater_greater.liga.ss08;

  # =<<
  lookup equal_less_less.liga.ss08 {
    ignore sub [equal less greater] equal' less less;
    ignore sub equal' less less [less equal];
    ignore sub parenleft @Question equal' less less;
    sub SPC SPC less_less.liga' by equal_less_less.liga.ss08;
    sub equal' SPC less_less.liga by SPC;
    sub SPC SPC less' by equal_less_less.liga.ss08;
    sub SPC less' less by SPC;
    sub equal' less less by SPC;
  } equal_less_less.liga.ss08;

  # =>>
  lookup equal_greater_greater.liga.ss08 {
    ignore sub [equal greater less] equal' greater greater;
    ignore sub equal' greater greater [greater equal];
    ignore sub parenleft @Question equal' greater greater;
    sub SPC SPC greater_greater.liga' by equal_greater_greater.liga.ss08;
    sub equal' SPC greater_greater.liga by SPC;
    sub SPC SPC greater' by equal_greater_greater.liga.ss08;
    sub SPC greater' greater by SPC;
    sub equal' greater greater by SPC;
  } equal_greater_greater.liga.ss08;

} ss08;

feature ss09 {

  featureNames {
    name "SS09: Asciitilde equal as not equal to ligature";
  };

  # ~=
  lookup asciitilde_equal.liga.ss09 {
    ignore sub [asciitilde less equal] asciitilde' equal;
    ignore sub asciitilde' equal [asciitilde equal greater less colon];
    sub SPC equal' by asciitilde_equal.liga.ss09;
    sub asciitilde' equal by SPC;
  } asciitilde_equal.liga.ss09;

} ss09;

feature ss10 {

  featureNames {
    name "SS10: Approximately equal to and approximately not equal to ligatures";
  };

  # =~
  lookup equal_asciitilde.liga.ss10 {
    ignore sub [asciitilde less greater colon equal] equal' asciitilde;
    ignore sub equal' asciitilde [asciitilde equal greater];
    sub SPC asciitilde' by equal_asciitilde.liga.ss10;
    sub equal' asciitilde by SPC;
  } equal_asciitilde.liga.ss10;

  # !~
  lookup exclam_asciitilde.liga.ss10 {
    ignore sub exclam exclam' asciitilde;
    ignore sub exclam' asciitilde [exclam asciitilde equal greater];
    sub SPC asciitilde' by exclam_asciitilde.liga.ss10;
    sub exclam' asciitilde by SPC;
  } exclam_asciitilde.liga.ss10;

} ss10;

feature ss11 {

  featureNames {
    name "SS11: Equal and extra punctuation ligatures";
  };

  @IgnoreEqual = [greater equal colon];

  # |=
  lookup bars_equal {
    sub bar_equal.liga by bar_equal.liga.ss11;
  } bars_equal;

  # ||=
  lookup bar_bar_equal.liga.ss11 {
    ignore sub bar bar' bar equal;
    ignore sub bar' bar equal bar;
    sub SPC bar_bar.liga' equal by SPC;
    sub SPC SPC equal' by bar_bar_equal.liga.ss11;
    sub SPC bar' equal by SPC;
    sub bar' bar equal by SPC;
  } bar_bar_equal.liga.ss11;

  # /=
  lookup slash_equal.liga.ss11 {
    ignore sub [slash less] slash' equal;
    ignore sub slash' equal @IgnoreEqual;
    sub SPC equal' by slash_equal.liga.ss11;
    sub slash' equal by SPC;
  } slash_equal.liga.ss11;

  # //=
  lookup slash_slash_equal.liga.ss11 {
    ignore sub [slash less] slash' slash equal;
    ignore sub slash' slash equal @IgnoreEqual;
    sub SPC slash_slash.liga' equal by SPC;
    sub SPC SPC equal' by slash_slash_equal.liga.ss11;
    sub SPC slash' equal by SPC;
    sub slash' slash equal by SPC;
  } slash_slash_equal.liga.ss11;

  # ^=
  lookup asciicircum_equal.liga.ss11 {
    ignore sub asciicircum asciicircum' equal;
    ignore sub asciicircum' equal @IgnoreEqual;
    sub SPC equal' by asciicircum_equal.liga.ss11;
    sub asciicircum' equal by SPC;
  } asciicircum_equal.liga.ss11;

  # &=
  lookup ampersand_equal.liga.ss11 {
    ignore sub ampersand ampersand' equal;
    ignore sub ampersand' equal @IgnoreEqual;
    sub SPC equal' by ampersand_equal.liga.ss11;
    sub ampersand' equal by SPC;
  } ampersand_equal.liga.ss11;

  # &= in cv01
  lookup ampersand_equal.liga.cv01.ss11 {
    ignore sub ampersand.cv01 ampersand.cv01' equal;
    ignore sub ampersand.cv01' equal @IgnoreEqual;
    sub SPC equal' by ampersand_equal.liga.cv01.ss11;
    sub ampersand.cv01' equal by SPC;
  } ampersand_equal.liga.cv01.ss11;

  # &= in cv65
  lookup ampersand_equal.liga.cv65.ss11 {
    ignore sub ampersand.cv65 ampersand.cv65' equal;
    ignore sub ampersand.cv65' equal @IgnoreEqual;
    sub SPC equal' by ampersand_equal.liga.cv65.ss11;
    sub ampersand.cv65' equal by SPC;
  } ampersand_equal.liga.cv65.ss11;

  # &&=
  lookup ampersand_ampersand_equal.liga.ss11 {
    ignore sub ampersand ampersand' ampersand equal;
    ignore sub ampersand' ampersand equal @IgnoreEqual;
    sub SPC ampersand_ampersand.liga' equal by SPC;
    sub SPC SPC equal' by ampersand_ampersand_equal.liga.ss11;
    sub SPC ampersand' equal by SPC;
    sub ampersand' ampersand equal by SPC;
  } ampersand_ampersand_equal.liga.ss11;

  # &&= in cv01
  lookup ampersand_ampersand_equal.liga.cv01.ss11 {
    ignore sub ampersand.cv01 ampersand.cv01' ampersand.cv01 equal;
    ignore sub ampersand.cv01' ampersand.cv01 equal @IgnoreEqual;
    sub SPC ampersand_ampersand.liga.cv01' equal by SPC;
    sub SPC SPC equal' by ampersand_ampersand_equal.liga.cv01.ss11;
    sub SPC ampersand.cv01' equal by SPC;
    sub ampersand.cv01' ampersand.cv01 equal by SPC;
  } ampersand_ampersand_equal.liga.cv01.ss11;

  # &&= in cv65
  lookup ampersand_ampersand_equal.liga.cv65.ss11 {
    ignore sub ampersand.cv65 ampersand.cv65' ampersand.cv65 equal;
    ignore sub ampersand.cv65' ampersand.cv65 equal @IgnoreEqual;
    sub SPC ampersand_ampersand.liga.cv65' equal by SPC;
    sub SPC SPC equal' by ampersand_ampersand_equal.liga.cv65.ss11;
    sub SPC ampersand.cv65' equal by SPC;
    sub ampersand.cv65' ampersand.cv65 equal by SPC;
  } ampersand_ampersand_equal.liga.cv65.ss11;

  # ?=
  lookup question_equal.liga.ss11 {
    ignore sub question question' equal;
    ignore sub question' equal @IgnoreEqual;
    sub SPC equal' by question_equal.liga.ss11;
    sub question' equal by SPC;
  } question_equal.liga.ss11;

  # ?= in cv62
  lookup question_equal.liga.cv62.ss11 {
    ignore sub question.cv62 question.cv62' equal;
    ignore sub question.cv62' equal @IgnoreEqual;
    sub SPC equal' by question_equal.liga.cv62.ss11;
    sub question.cv62' equal by SPC;
  } question_equal.liga.cv62.ss11;

  # ??=
  lookup question_question_equal.liga.ss11 {
    ignore sub question question' question equal;
    ignore sub question' question equal @IgnoreEqual;
    sub SPC question_question.liga' equal by SPC;
    sub SPC SPC equal' by question_question_equal.liga.ss11;
    sub SPC question' equal by SPC;
    sub question' question equal by SPC;
  } question_question_equal.liga.ss11;

  # ??= in cv62
  lookup question_question_equal.liga.cv62.ss11 {
    ignore sub question.cv62 question.cv62' question.cv62 equal;
    ignore sub question.cv62' question.cv62 equal @IgnoreEqual;
    sub SPC question_question.liga.cv62' equal by SPC;
    sub SPC SPC equal' by question_question_equal.liga.cv62.ss11;
    sub SPC question.cv62' equal by SPC;
    sub question.cv62' question.cv62 equal by SPC;
  } question_question_equal.liga.cv62.ss11;

} ss11;